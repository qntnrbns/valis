# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from valis.models.public_member_response import PublicMemberResponse

class TestPublicMemberResponse(unittest.TestCase):
    """PublicMemberResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PublicMemberResponse:
        """Test PublicMemberResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PublicMemberResponse`
        """
        model = PublicMemberResponse()
        if include_optional:
            return PublicMemberResponse(
                member_id = 56,
                identity_id = 56,
                member_detail_id = 56,
                session_code = '',
                member_number = '',
                list_display_name = '',
                member_display_name = '',
                patron_display_name = '',
                salutation = '',
                service_begin_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                service_end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_election_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                room_number = '',
                service_end_reason = '',
                gab_phone_number = '',
                gab_email_address = '',
                seat_number = 56,
                seniority = 56,
                voting_sequence = 56,
                chamber_code = '0',
                chamber_name = '',
                district_id = 56,
                district_name = '',
                party_code = '0',
                member_status_id = 56,
                member_status = '',
                status_reason = '',
                is_public = True
            )
        else:
            return PublicMemberResponse(
        )
        """

    def testPublicMemberResponse(self):
        """Test PublicMemberResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
