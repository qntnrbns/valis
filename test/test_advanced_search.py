# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from valis.models.advanced_search import AdvancedSearch

class TestAdvancedSearch(unittest.TestCase):
    """AdvancedSearch unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AdvancedSearch:
        """Test AdvancedSearch
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AdvancedSearch`
        """
        model = AdvancedSearch()
        if include_optional:
            return AdvancedSearch(
                event_control_id = 56,
                start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                event_start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                event_end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                introduction_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                legislation_title = '',
                description = '',
                chambercode = '',
                legislation_status_id = 56,
                legislation_category_id = 56,
                committee_id = 56,
                session_id = 56,
                session_code = 56,
                legislation_event_type_id = 56,
                summary_length = 56,
                patron_types = [
                    56
                    ],
                member_id = 56,
                subject_index_id = 56,
                most_frequent = True,
                is_pending = True,
                keyword_expression = '',
                keyword_location = '',
                keyword_summary_version_id = 56,
                keyword_legislation_version_id = 56,
                keyword_use_global_session_search = True,
                skip_legislation_text_calls = True,
                current_status = True,
                keywords = [
                    valis.models.key_word.KeyWord(
                        keyword = '', 
                        operator = '', 
                        keywords = [
                            valis.models.key_word.KeyWord(
                                keyword = '', 
                                operator = '', )
                            ], )
                    ],
                exclude_failed = True,
                chapter_number = '',
                legislation_numbers = [
                    valis.models.legislation_number_response.LegislationNumberResponse(
                        legislation_number = '', )
                    ],
                legislation_ids = [
                    valis.models.legislation_id.LegislationID(
                        legislation_id = 56, )
                    ]
            )
        else:
            return AdvancedSearch(
        )
        """

    def testAdvancedSearch(self):
        """Test AdvancedSearch"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
