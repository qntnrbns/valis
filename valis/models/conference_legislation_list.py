# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ConferenceLegislationList(BaseModel):
    """
    Conference Legislation Details
    """ # noqa: E501
    legislation_id: Optional[StrictInt] = Field(default=None, description="Legislation unique identifier", alias="LegislationID")
    legislation_number: Optional[StrictStr] = Field(default=None, description="Legislation Number (Numerical Part of the Legislation Number)", alias="LegislationNumber")
    full_number: Optional[StrictStr] = Field(default=None, description="Full Legislation Number", alias="FullNumber")
    description: Optional[StrictStr] = Field(default=None, description="Legislation Description", alias="Description")
    introduction_date: Optional[datetime] = Field(default=None, description="Introduction Date", alias="IntroductionDate")
    offered_date: Optional[datetime] = Field(default=None, description="Offered Date", alias="OfferedDate")
    chamber_code: Optional[StrictStr] = Field(default=None, description="Chamber Code Example: H = House or S = Summary", alias="ChamberCode")
    legislation_type_code: Optional[StrictStr] = Field(default=None, description="Legislation Type Code", alias="LegislationTypeCode")
    legislation_class_id: Optional[StrictInt] = Field(default=None, description="Legislation Class ID", alias="LegislationClassID")
    legislation_class: Optional[StrictStr] = Field(default=None, description="Legislation Class", alias="LegislationClass")
    legislation_key: Optional[StrictInt] = Field(default=None, description="Legislation Key", alias="LegislationKey")
    legislation_status: Optional[StrictStr] = Field(default=None, description="Legislation Status", alias="LegislationStatus")
    effective_type: Optional[StrictStr] = Field(default=None, description="Effective Type", alias="EffectiveType")
    session_id: Optional[StrictInt] = Field(default=None, description="Session ID", alias="SessionID")
    session_name: Optional[StrictStr] = Field(default=None, description="Session Name", alias="SessionName")
    is_prefile: Optional[StrictBool] = Field(default=None, description="Is Prefiled Legislation", alias="IsPrefile")
    __properties: ClassVar[List[str]] = ["LegislationID", "LegislationNumber", "FullNumber", "Description", "IntroductionDate", "OfferedDate", "ChamberCode", "LegislationTypeCode", "LegislationClassID", "LegislationClass", "LegislationKey", "LegislationStatus", "EffectiveType", "SessionID", "SessionName", "IsPrefile"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConferenceLegislationList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if legislation_id (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_id is None and "legislation_id" in self.model_fields_set:
            _dict['LegislationID'] = None

        # set to None if legislation_number (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_number is None and "legislation_number" in self.model_fields_set:
            _dict['LegislationNumber'] = None

        # set to None if full_number (nullable) is None
        # and model_fields_set contains the field
        if self.full_number is None and "full_number" in self.model_fields_set:
            _dict['FullNumber'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['Description'] = None

        # set to None if chamber_code (nullable) is None
        # and model_fields_set contains the field
        if self.chamber_code is None and "chamber_code" in self.model_fields_set:
            _dict['ChamberCode'] = None

        # set to None if legislation_type_code (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_type_code is None and "legislation_type_code" in self.model_fields_set:
            _dict['LegislationTypeCode'] = None

        # set to None if legislation_class (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_class is None and "legislation_class" in self.model_fields_set:
            _dict['LegislationClass'] = None

        # set to None if legislation_status (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_status is None and "legislation_status" in self.model_fields_set:
            _dict['LegislationStatus'] = None

        # set to None if effective_type (nullable) is None
        # and model_fields_set contains the field
        if self.effective_type is None and "effective_type" in self.model_fields_set:
            _dict['EffectiveType'] = None

        # set to None if session_name (nullable) is None
        # and model_fields_set contains the field
        if self.session_name is None and "session_name" in self.model_fields_set:
            _dict['SessionName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConferenceLegislationList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "LegislationID": obj.get("LegislationID"),
            "LegislationNumber": obj.get("LegislationNumber"),
            "FullNumber": obj.get("FullNumber"),
            "Description": obj.get("Description"),
            "IntroductionDate": obj.get("IntroductionDate"),
            "OfferedDate": obj.get("OfferedDate"),
            "ChamberCode": obj.get("ChamberCode"),
            "LegislationTypeCode": obj.get("LegislationTypeCode"),
            "LegislationClassID": obj.get("LegislationClassID"),
            "LegislationClass": obj.get("LegislationClass"),
            "LegislationKey": obj.get("LegislationKey"),
            "LegislationStatus": obj.get("LegislationStatus"),
            "EffectiveType": obj.get("EffectiveType"),
            "SessionID": obj.get("SessionID"),
            "SessionName": obj.get("SessionName"),
            "IsPrefile": obj.get("IsPrefile")
        })
        return _obj


