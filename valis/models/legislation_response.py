# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from valis.models.legislation_search_text import LegislationSearchText
from valis.models.patron import Patron
from valis.models.session_response import SessionResponse
from typing import Optional, Set
from typing_extensions import Self

class LegislationResponse(BaseModel):
    """
    Legislation Response, inherit from LegislationModel
    """ # noqa: E501
    session_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Session", alias="SessionID")
    session_code: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(default=None, description="Session code (e.g. 20181)", alias="SessionCode")
    legislation_class_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Legislation Class", alias="LegislationClassID")
    legislation_number: Optional[StrictStr] = Field(default=None, description="Legislation number", alias="LegislationNumber")
    description: Optional[StrictStr] = Field(default=None, description="Legislation Description/Catchline", alias="Description")
    legislation_title: Optional[StrictStr] = Field(default=None, alias="LegislationTitle")
    offered_date: Optional[datetime] = Field(default=None, description="Legislation Offered date", alias="OfferedDate")
    introduction_date: Optional[datetime] = Field(default=None, description="Legislation Introduction date", alias="IntroductionDate")
    chamber_code: Optional[StrictStr] = Field(default=None, description="Chamber code (H/S)", alias="ChamberCode")
    legislation_type_code: Optional[StrictStr] = Field(default=None, description="Legislation Type Code description", alias="LegislationTypeCode")
    full_number: Optional[StrictStr] = Field(default=None, description="Full Number of the bill", alias="FullNumber")
    legislation_status_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Legislative Status", alias="LegislationStatusID")
    legislation_id: Optional[StrictInt] = Field(default=None, description="Legislation unique identifier", alias="LegislationID")
    legislation_key: Optional[StrictInt] = Field(default=None, description="Legislation Key (Numerical Part of the Legislation Number)", alias="LegislationKey")
    legislation_status: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="Legislative Status", alias="LegislationStatus")
    candidate_date: Optional[StrictStr] = Field(default=None, description="Legislative CandidateDate", alias="CandidateDate")
    legislation_summary: Optional[StrictStr] = Field(default=None, description="Legislation Summary", alias="LegislationSummary")
    legislation_text_id: Optional[StrictInt] = Field(default=None, description="The ID of the latest legislation text for this piece of legislation", alias="LegislationTextID")
    effective_type: Optional[StrictStr] = Field(default=None, description="Determines whether the enaction of the legislation is standard/emergency/other", alias="EffectiveType")
    effective_type_id: Optional[StrictInt] = Field(default=None, description="ID of EffectiveType", alias="EffectiveTypeID")
    pending_change: Optional[StrictBool] = Field(default=None, description="Tells whether a piece of legislation text on this legislation has any unpublished changes", alias="PendingChange")
    summary_version: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="Summary Version", alias="SummaryVersion")
    session_name: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="Session Name (ex. 2018 Regular Session)", alias="SessionName")
    committee_name: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="Committee Name Ex. Commerce and Labor", alias="CommitteeName")
    committee_id: Optional[StrictInt] = Field(default=None, description="Committee ID", alias="CommitteeID")
    parent_committee_name: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="Parent Committee Name", alias="ParentCommitteeName")
    chapter_number: Optional[StrictStr] = Field(default=None, description="Chapter number for the acts of assembly", alias="ChapterNumber")
    committee_number: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(default=None, description="Committee Number", alias="CommitteeNumber")
    version_date: Optional[StrictStr] = Field(default=None, description="Version Date", alias="VersionDate")
    document_code: Optional[StrictStr] = Field(default=None, description="Document Code", alias="DocumentCode")
    patrons: Optional[List[Patron]] = Field(default=None, description="List of Patrons on the associated Legislation", alias="Patrons")
    house_passage_date: Optional[StrictStr] = Field(default=None, description="House Passage Date", alias="HousePassageDate")
    senate_passage_date: Optional[StrictStr] = Field(default=None, description="Senate Passage Date", alias="SenatePassageDate")
    is_complete: Optional[StrictBool] = Field(default=None, alias="IsComplete")
    sessions: Optional[List[SessionResponse]] = Field(default=None, description="List of Sessions on the associated Legislation", alias="Sessions")
    search_text: Optional[List[LegislationSearchText]] = Field(default=None, description="searchText list contains version results", alias="SearchText")
    __properties: ClassVar[List[str]] = ["SessionID", "SessionCode", "LegislationClassID", "LegislationNumber", "Description", "LegislationTitle", "OfferedDate", "IntroductionDate", "ChamberCode", "LegislationTypeCode", "FullNumber", "LegislationStatusID", "LegislationID", "LegislationKey", "LegislationStatus", "CandidateDate", "LegislationSummary", "LegislationTextID", "EffectiveType", "EffectiveTypeID", "PendingChange", "SummaryVersion", "SessionName", "CommitteeName", "CommitteeID", "ParentCommitteeName", "ChapterNumber", "CommitteeNumber", "VersionDate", "DocumentCode", "Patrons", "HousePassageDate", "SenatePassageDate", "IsComplete", "Sessions", "SearchText"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LegislationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in patrons (list)
        _items = []
        if self.patrons:
            for _item_patrons in self.patrons:
                if _item_patrons:
                    _items.append(_item_patrons.to_dict())
            _dict['Patrons'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sessions (list)
        _items = []
        if self.sessions:
            for _item_sessions in self.sessions:
                if _item_sessions:
                    _items.append(_item_sessions.to_dict())
            _dict['Sessions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in search_text (list)
        _items = []
        if self.search_text:
            for _item_search_text in self.search_text:
                if _item_search_text:
                    _items.append(_item_search_text.to_dict())
            _dict['SearchText'] = _items
        # set to None if session_id (nullable) is None
        # and model_fields_set contains the field
        if self.session_id is None and "session_id" in self.model_fields_set:
            _dict['SessionID'] = None

        # set to None if session_code (nullable) is None
        # and model_fields_set contains the field
        if self.session_code is None and "session_code" in self.model_fields_set:
            _dict['SessionCode'] = None

        # set to None if legislation_class_id (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_class_id is None and "legislation_class_id" in self.model_fields_set:
            _dict['LegislationClassID'] = None

        # set to None if legislation_number (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_number is None and "legislation_number" in self.model_fields_set:
            _dict['LegislationNumber'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['Description'] = None

        # set to None if legislation_title (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_title is None and "legislation_title" in self.model_fields_set:
            _dict['LegislationTitle'] = None

        # set to None if offered_date (nullable) is None
        # and model_fields_set contains the field
        if self.offered_date is None and "offered_date" in self.model_fields_set:
            _dict['OfferedDate'] = None

        # set to None if introduction_date (nullable) is None
        # and model_fields_set contains the field
        if self.introduction_date is None and "introduction_date" in self.model_fields_set:
            _dict['IntroductionDate'] = None

        # set to None if chamber_code (nullable) is None
        # and model_fields_set contains the field
        if self.chamber_code is None and "chamber_code" in self.model_fields_set:
            _dict['ChamberCode'] = None

        # set to None if legislation_type_code (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_type_code is None and "legislation_type_code" in self.model_fields_set:
            _dict['LegislationTypeCode'] = None

        # set to None if full_number (nullable) is None
        # and model_fields_set contains the field
        if self.full_number is None and "full_number" in self.model_fields_set:
            _dict['FullNumber'] = None

        # set to None if legislation_status_id (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_status_id is None and "legislation_status_id" in self.model_fields_set:
            _dict['LegislationStatusID'] = None

        # set to None if legislation_id (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_id is None and "legislation_id" in self.model_fields_set:
            _dict['LegislationID'] = None

        # set to None if legislation_status (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_status is None and "legislation_status" in self.model_fields_set:
            _dict['LegislationStatus'] = None

        # set to None if candidate_date (nullable) is None
        # and model_fields_set contains the field
        if self.candidate_date is None and "candidate_date" in self.model_fields_set:
            _dict['CandidateDate'] = None

        # set to None if legislation_summary (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_summary is None and "legislation_summary" in self.model_fields_set:
            _dict['LegislationSummary'] = None

        # set to None if effective_type (nullable) is None
        # and model_fields_set contains the field
        if self.effective_type is None and "effective_type" in self.model_fields_set:
            _dict['EffectiveType'] = None

        # set to None if summary_version (nullable) is None
        # and model_fields_set contains the field
        if self.summary_version is None and "summary_version" in self.model_fields_set:
            _dict['SummaryVersion'] = None

        # set to None if session_name (nullable) is None
        # and model_fields_set contains the field
        if self.session_name is None and "session_name" in self.model_fields_set:
            _dict['SessionName'] = None

        # set to None if committee_name (nullable) is None
        # and model_fields_set contains the field
        if self.committee_name is None and "committee_name" in self.model_fields_set:
            _dict['CommitteeName'] = None

        # set to None if parent_committee_name (nullable) is None
        # and model_fields_set contains the field
        if self.parent_committee_name is None and "parent_committee_name" in self.model_fields_set:
            _dict['ParentCommitteeName'] = None

        # set to None if chapter_number (nullable) is None
        # and model_fields_set contains the field
        if self.chapter_number is None and "chapter_number" in self.model_fields_set:
            _dict['ChapterNumber'] = None

        # set to None if committee_number (nullable) is None
        # and model_fields_set contains the field
        if self.committee_number is None and "committee_number" in self.model_fields_set:
            _dict['CommitteeNumber'] = None

        # set to None if version_date (nullable) is None
        # and model_fields_set contains the field
        if self.version_date is None and "version_date" in self.model_fields_set:
            _dict['VersionDate'] = None

        # set to None if document_code (nullable) is None
        # and model_fields_set contains the field
        if self.document_code is None and "document_code" in self.model_fields_set:
            _dict['DocumentCode'] = None

        # set to None if patrons (nullable) is None
        # and model_fields_set contains the field
        if self.patrons is None and "patrons" in self.model_fields_set:
            _dict['Patrons'] = None

        # set to None if house_passage_date (nullable) is None
        # and model_fields_set contains the field
        if self.house_passage_date is None and "house_passage_date" in self.model_fields_set:
            _dict['HousePassageDate'] = None

        # set to None if senate_passage_date (nullable) is None
        # and model_fields_set contains the field
        if self.senate_passage_date is None and "senate_passage_date" in self.model_fields_set:
            _dict['SenatePassageDate'] = None

        # set to None if sessions (nullable) is None
        # and model_fields_set contains the field
        if self.sessions is None and "sessions" in self.model_fields_set:
            _dict['Sessions'] = None

        # set to None if search_text (nullable) is None
        # and model_fields_set contains the field
        if self.search_text is None and "search_text" in self.model_fields_set:
            _dict['SearchText'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LegislationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "SessionID": obj.get("SessionID"),
            "SessionCode": obj.get("SessionCode"),
            "LegislationClassID": obj.get("LegislationClassID"),
            "LegislationNumber": obj.get("LegislationNumber"),
            "Description": obj.get("Description"),
            "LegislationTitle": obj.get("LegislationTitle"),
            "OfferedDate": obj.get("OfferedDate"),
            "IntroductionDate": obj.get("IntroductionDate"),
            "ChamberCode": obj.get("ChamberCode"),
            "LegislationTypeCode": obj.get("LegislationTypeCode"),
            "FullNumber": obj.get("FullNumber"),
            "LegislationStatusID": obj.get("LegislationStatusID"),
            "LegislationID": obj.get("LegislationID"),
            "LegislationKey": obj.get("LegislationKey"),
            "LegislationStatus": obj.get("LegislationStatus"),
            "CandidateDate": obj.get("CandidateDate"),
            "LegislationSummary": obj.get("LegislationSummary"),
            "LegislationTextID": obj.get("LegislationTextID"),
            "EffectiveType": obj.get("EffectiveType"),
            "EffectiveTypeID": obj.get("EffectiveTypeID"),
            "PendingChange": obj.get("PendingChange"),
            "SummaryVersion": obj.get("SummaryVersion"),
            "SessionName": obj.get("SessionName"),
            "CommitteeName": obj.get("CommitteeName"),
            "CommitteeID": obj.get("CommitteeID"),
            "ParentCommitteeName": obj.get("ParentCommitteeName"),
            "ChapterNumber": obj.get("ChapterNumber"),
            "CommitteeNumber": obj.get("CommitteeNumber"),
            "VersionDate": obj.get("VersionDate"),
            "DocumentCode": obj.get("DocumentCode"),
            "Patrons": [Patron.from_dict(_item) for _item in obj["Patrons"]] if obj.get("Patrons") is not None else None,
            "HousePassageDate": obj.get("HousePassageDate"),
            "SenatePassageDate": obj.get("SenatePassageDate"),
            "IsComplete": obj.get("IsComplete"),
            "Sessions": [SessionResponse.from_dict(_item) for _item in obj["Sessions"]] if obj.get("Sessions") is not None else None,
            "SearchText": [LegislationSearchText.from_dict(_item) for _item in obj["SearchText"]] if obj.get("SearchText") is not None else None
        })
        return _obj


