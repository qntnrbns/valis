# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from valis.models.docket_file_public_get_response import DocketFilePublicGetResponse
from typing import Optional, Set
from typing_extensions import Self

class DocketPublicListGetResponse(BaseModel):
    """
    Public Docket Listing
    """ # noqa: E501
    docket_date: datetime = Field(description="Docket(Committee Calendar) Date", alias="DocketDate")
    meeting_time: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="Meeting Time", alias="MeetingTime")
    docket_number: Optional[StrictInt] = Field(default=None, description="Docket(Committee Calendar) Number", alias="DocketNumber")
    description: Optional[Annotated[str, Field(strict=True, max_length=250)]] = Field(default=None, description="Docket(Committee Calendar) Description", alias="Description")
    is_public: Optional[StrictBool] = Field(default=None, description="Is Docket(Committee Calendar) for Public Consumption", alias="IsPublic")
    docket_type_id: Optional[StrictInt] = Field(default=None, description="Docket(Committee Calendar) Type ID", alias="DocketTypeID")
    docket_type: Annotated[str, Field(strict=True, max_length=25)] = Field(description="Docket Type", alias="DocketType")
    chamber_code: Optional[Annotated[str, Field(strict=True, max_length=1)]] = Field(default=None, description="Chamber Code is always defaulted to S for Senate", alias="ChamberCode")
    session_id: StrictInt = Field(description="Session ID", alias="SessionID")
    session_code: Optional[StrictStr] = Field(default=None, description="Session Code", alias="SessionCode")
    vote_room_id: Optional[StrictInt] = Field(default=None, description="Vote Room ID", alias="VoteRoomID")
    comments: Optional[Annotated[str, Field(strict=True, max_length=1000)]] = Field(default=None, description="Meeting Notes/Comments", alias="Comments")
    committee_id: StrictInt = Field(description="Committee ID", alias="CommitteeID")
    committee_name: Optional[StrictStr] = Field(default=None, description="Committee Name", alias="CommitteeName")
    parent_committee_name: Optional[StrictStr] = Field(default=None, description="Parent Committee Name", alias="ParentCommitteeName")
    pending_change: Optional[StrictBool] = Field(default=None, description="Pending Change to Docket", alias="PendingChange")
    reference_number: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="Reference Number used for External Reference to Docket", alias="ReferenceNumber")
    is_proforma: Optional[StrictBool] = Field(default=None, description="IsProforma to Calendar", alias="IsProforma")
    deletion_date: Optional[datetime] = Field(default=None, description="Docket(Committee Calendar) Deletion Date", alias="DeletionDate")
    docket_id: StrictInt = Field(description="Docket unique identifier", alias="DocketID")
    docket_files: Optional[List[DocketFilePublicGetResponse]] = Field(default=None, description="list of Docket Files for a specific Senate Docket", alias="DocketFiles")
    __properties: ClassVar[List[str]] = ["DocketDate", "MeetingTime", "DocketNumber", "Description", "IsPublic", "DocketTypeID", "DocketType", "ChamberCode", "SessionID", "SessionCode", "VoteRoomID", "Comments", "CommitteeID", "CommitteeName", "ParentCommitteeName", "PendingChange", "ReferenceNumber", "IsProforma", "DeletionDate", "DocketID", "DocketFiles"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DocketPublicListGetResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in docket_files (list)
        _items = []
        if self.docket_files:
            for _item_docket_files in self.docket_files:
                if _item_docket_files:
                    _items.append(_item_docket_files.to_dict())
            _dict['DocketFiles'] = _items
        # set to None if meeting_time (nullable) is None
        # and model_fields_set contains the field
        if self.meeting_time is None and "meeting_time" in self.model_fields_set:
            _dict['MeetingTime'] = None

        # set to None if docket_number (nullable) is None
        # and model_fields_set contains the field
        if self.docket_number is None and "docket_number" in self.model_fields_set:
            _dict['DocketNumber'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['Description'] = None

        # set to None if is_public (nullable) is None
        # and model_fields_set contains the field
        if self.is_public is None and "is_public" in self.model_fields_set:
            _dict['IsPublic'] = None

        # set to None if docket_type_id (nullable) is None
        # and model_fields_set contains the field
        if self.docket_type_id is None and "docket_type_id" in self.model_fields_set:
            _dict['DocketTypeID'] = None

        # set to None if chamber_code (nullable) is None
        # and model_fields_set contains the field
        if self.chamber_code is None and "chamber_code" in self.model_fields_set:
            _dict['ChamberCode'] = None

        # set to None if session_code (nullable) is None
        # and model_fields_set contains the field
        if self.session_code is None and "session_code" in self.model_fields_set:
            _dict['SessionCode'] = None

        # set to None if vote_room_id (nullable) is None
        # and model_fields_set contains the field
        if self.vote_room_id is None and "vote_room_id" in self.model_fields_set:
            _dict['VoteRoomID'] = None

        # set to None if comments (nullable) is None
        # and model_fields_set contains the field
        if self.comments is None and "comments" in self.model_fields_set:
            _dict['Comments'] = None

        # set to None if committee_name (nullable) is None
        # and model_fields_set contains the field
        if self.committee_name is None and "committee_name" in self.model_fields_set:
            _dict['CommitteeName'] = None

        # set to None if parent_committee_name (nullable) is None
        # and model_fields_set contains the field
        if self.parent_committee_name is None and "parent_committee_name" in self.model_fields_set:
            _dict['ParentCommitteeName'] = None

        # set to None if pending_change (nullable) is None
        # and model_fields_set contains the field
        if self.pending_change is None and "pending_change" in self.model_fields_set:
            _dict['PendingChange'] = None

        # set to None if reference_number (nullable) is None
        # and model_fields_set contains the field
        if self.reference_number is None and "reference_number" in self.model_fields_set:
            _dict['ReferenceNumber'] = None

        # set to None if is_proforma (nullable) is None
        # and model_fields_set contains the field
        if self.is_proforma is None and "is_proforma" in self.model_fields_set:
            _dict['IsProforma'] = None

        # set to None if deletion_date (nullable) is None
        # and model_fields_set contains the field
        if self.deletion_date is None and "deletion_date" in self.model_fields_set:
            _dict['DeletionDate'] = None

        # set to None if docket_files (nullable) is None
        # and model_fields_set contains the field
        if self.docket_files is None and "docket_files" in self.model_fields_set:
            _dict['DocketFiles'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DocketPublicListGetResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "DocketDate": obj.get("DocketDate"),
            "MeetingTime": obj.get("MeetingTime"),
            "DocketNumber": obj.get("DocketNumber"),
            "Description": obj.get("Description"),
            "IsPublic": obj.get("IsPublic"),
            "DocketTypeID": obj.get("DocketTypeID"),
            "DocketType": obj.get("DocketType"),
            "ChamberCode": obj.get("ChamberCode"),
            "SessionID": obj.get("SessionID"),
            "SessionCode": obj.get("SessionCode"),
            "VoteRoomID": obj.get("VoteRoomID"),
            "Comments": obj.get("Comments"),
            "CommitteeID": obj.get("CommitteeID"),
            "CommitteeName": obj.get("CommitteeName"),
            "ParentCommitteeName": obj.get("ParentCommitteeName"),
            "PendingChange": obj.get("PendingChange"),
            "ReferenceNumber": obj.get("ReferenceNumber"),
            "IsProforma": obj.get("IsProforma"),
            "DeletionDate": obj.get("DeletionDate"),
            "DocketID": obj.get("DocketID"),
            "DocketFiles": [DocketFilePublicGetResponse.from_dict(_item) for _item in obj["DocketFiles"]] if obj.get("DocketFiles") is not None else None
        })
        return _obj


