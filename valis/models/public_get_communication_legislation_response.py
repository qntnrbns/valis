# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from valis.models.patron1 import Patron1
from typing import Optional, Set
from typing_extensions import Self

class PublicGetCommunicationLegislationResponse(BaseModel):
    """
    Information for Public Get Communication Legislation
    """ # noqa: E501
    communication_category_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Communication Category", alias="CommunicationCategoryID")
    legislation_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Legislation", alias="LegislationID")
    legislation_number: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(default=None, description="Legislation number", alias="LegislationNumber")
    legislation_key: Optional[StrictInt] = Field(default=None, description="Legislation key", alias="LegislationKey")
    legislation_description: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, description="Legislation description", alias="LegislationDescription")
    is_active: Optional[StrictBool] = Field(default=None, description="Is this active?", alias="IsActive")
    legislation_text_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Legislation Text", alias="LegislationTextID")
    committee_referred_name: Optional[StrictStr] = Field(default=None, description="Committee Referred Name", alias="CommitteeReferredName")
    event_code: Optional[StrictStr] = Field(default=None, description="Event code", alias="EventCode")
    document_code: Optional[StrictStr] = Field(default=None, description="Document code", alias="DocumentCode")
    ld_number: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="LD number", alias="LDNumber")
    draft_title: Optional[StrictStr] = Field(default=None, description="Draft Title", alias="DraftTitle")
    vote_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Vote", alias="VoteID")
    vote_number: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="Vote number", alias="VoteNumber")
    suffix: Optional[Annotated[str, Field(strict=True, max_length=1)]] = Field(default=None, description="Legislation suffix", alias="Suffix")
    effective_type_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Effective Type ID", alias="EffectiveTypeID")
    effective_type: Optional[StrictStr] = Field(default=None, description="Effective Type", alias="EffectiveType")
    is_candidate: Optional[StrictBool] = Field(default=None, description="Does this communication include bills that are a candidate?", alias="IsCandidate")
    communication_legislation_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for CommunicationLegislation", alias="CommunicationLegislationID")
    patrons: Optional[List[Patron1]] = Field(default=None, description="List of Patrons", alias="Patrons")
    __properties: ClassVar[List[str]] = ["CommunicationCategoryID", "LegislationID", "LegislationNumber", "LegislationKey", "LegislationDescription", "IsActive", "LegislationTextID", "CommitteeReferredName", "EventCode", "DocumentCode", "LDNumber", "DraftTitle", "VoteID", "VoteNumber", "Suffix", "EffectiveTypeID", "EffectiveType", "IsCandidate", "CommunicationLegislationID", "Patrons"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicGetCommunicationLegislationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in patrons (list)
        _items = []
        if self.patrons:
            for _item_patrons in self.patrons:
                if _item_patrons:
                    _items.append(_item_patrons.to_dict())
            _dict['Patrons'] = _items
        # set to None if communication_category_id (nullable) is None
        # and model_fields_set contains the field
        if self.communication_category_id is None and "communication_category_id" in self.model_fields_set:
            _dict['CommunicationCategoryID'] = None

        # set to None if legislation_number (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_number is None and "legislation_number" in self.model_fields_set:
            _dict['LegislationNumber'] = None

        # set to None if legislation_description (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_description is None and "legislation_description" in self.model_fields_set:
            _dict['LegislationDescription'] = None

        # set to None if is_active (nullable) is None
        # and model_fields_set contains the field
        if self.is_active is None and "is_active" in self.model_fields_set:
            _dict['IsActive'] = None

        # set to None if legislation_text_id (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_text_id is None and "legislation_text_id" in self.model_fields_set:
            _dict['LegislationTextID'] = None

        # set to None if committee_referred_name (nullable) is None
        # and model_fields_set contains the field
        if self.committee_referred_name is None and "committee_referred_name" in self.model_fields_set:
            _dict['CommitteeReferredName'] = None

        # set to None if event_code (nullable) is None
        # and model_fields_set contains the field
        if self.event_code is None and "event_code" in self.model_fields_set:
            _dict['EventCode'] = None

        # set to None if document_code (nullable) is None
        # and model_fields_set contains the field
        if self.document_code is None and "document_code" in self.model_fields_set:
            _dict['DocumentCode'] = None

        # set to None if ld_number (nullable) is None
        # and model_fields_set contains the field
        if self.ld_number is None and "ld_number" in self.model_fields_set:
            _dict['LDNumber'] = None

        # set to None if draft_title (nullable) is None
        # and model_fields_set contains the field
        if self.draft_title is None and "draft_title" in self.model_fields_set:
            _dict['DraftTitle'] = None

        # set to None if vote_id (nullable) is None
        # and model_fields_set contains the field
        if self.vote_id is None and "vote_id" in self.model_fields_set:
            _dict['VoteID'] = None

        # set to None if vote_number (nullable) is None
        # and model_fields_set contains the field
        if self.vote_number is None and "vote_number" in self.model_fields_set:
            _dict['VoteNumber'] = None

        # set to None if suffix (nullable) is None
        # and model_fields_set contains the field
        if self.suffix is None and "suffix" in self.model_fields_set:
            _dict['Suffix'] = None

        # set to None if effective_type_id (nullable) is None
        # and model_fields_set contains the field
        if self.effective_type_id is None and "effective_type_id" in self.model_fields_set:
            _dict['EffectiveTypeID'] = None

        # set to None if effective_type (nullable) is None
        # and model_fields_set contains the field
        if self.effective_type is None and "effective_type" in self.model_fields_set:
            _dict['EffectiveType'] = None

        # set to None if is_candidate (nullable) is None
        # and model_fields_set contains the field
        if self.is_candidate is None and "is_candidate" in self.model_fields_set:
            _dict['IsCandidate'] = None

        # set to None if communication_legislation_id (nullable) is None
        # and model_fields_set contains the field
        if self.communication_legislation_id is None and "communication_legislation_id" in self.model_fields_set:
            _dict['CommunicationLegislationID'] = None

        # set to None if patrons (nullable) is None
        # and model_fields_set contains the field
        if self.patrons is None and "patrons" in self.model_fields_set:
            _dict['Patrons'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicGetCommunicationLegislationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CommunicationCategoryID": obj.get("CommunicationCategoryID"),
            "LegislationID": obj.get("LegislationID"),
            "LegislationNumber": obj.get("LegislationNumber"),
            "LegislationKey": obj.get("LegislationKey"),
            "LegislationDescription": obj.get("LegislationDescription"),
            "IsActive": obj.get("IsActive"),
            "LegislationTextID": obj.get("LegislationTextID"),
            "CommitteeReferredName": obj.get("CommitteeReferredName"),
            "EventCode": obj.get("EventCode"),
            "DocumentCode": obj.get("DocumentCode"),
            "LDNumber": obj.get("LDNumber"),
            "DraftTitle": obj.get("DraftTitle"),
            "VoteID": obj.get("VoteID"),
            "VoteNumber": obj.get("VoteNumber"),
            "Suffix": obj.get("Suffix"),
            "EffectiveTypeID": obj.get("EffectiveTypeID"),
            "EffectiveType": obj.get("EffectiveType"),
            "IsCandidate": obj.get("IsCandidate"),
            "CommunicationLegislationID": obj.get("CommunicationLegislationID"),
            "Patrons": [Patron1.from_dict(_item) for _item in obj["Patrons"]] if obj.get("Patrons") is not None else None
        })
        return _obj


