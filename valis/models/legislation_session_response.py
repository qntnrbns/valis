# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from valis.models.patron import Patron
from typing import Optional, Set
from typing_extensions import Self

class LegislationSessionResponse(BaseModel):
    """
    LegislationSessionResponse
    """ # noqa: E501
    legislation_id: Optional[StrictInt] = Field(default=None, description="Legislation unique identifier", alias="LegislationID")
    legislation_number: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(default=None, description="Legislation Number (Unique for each Biennial)", alias="LegislationNumber")
    description: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, description="Legislation Description/Catchline", alias="Description")
    chamber_code: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=1)]] = Field(default=None, description="Chamber Code", alias="ChamberCode")
    legislation_type_code: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=1)]] = Field(default=None, description="Legislation Type Code", alias="LegislationTypeCode")
    legislation_key: Optional[StrictInt] = Field(default=None, description="Legislation Key (Numerical Part of the Legislation Number)", alias="LegislationKey")
    legislation_status: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="Legislative Status", alias="LegislationStatus")
    patrons: Optional[List[Patron]] = Field(default=None, description="List of Patrons on the associated Legislation", alias="Patrons")
    __properties: ClassVar[List[str]] = ["LegislationID", "LegislationNumber", "Description", "ChamberCode", "LegislationTypeCode", "LegislationKey", "LegislationStatus", "Patrons"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LegislationSessionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in patrons (list)
        _items = []
        if self.patrons:
            for _item_patrons in self.patrons:
                if _item_patrons:
                    _items.append(_item_patrons.to_dict())
            _dict['Patrons'] = _items
        # set to None if legislation_id (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_id is None and "legislation_id" in self.model_fields_set:
            _dict['LegislationID'] = None

        # set to None if legislation_number (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_number is None and "legislation_number" in self.model_fields_set:
            _dict['LegislationNumber'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['Description'] = None

        # set to None if chamber_code (nullable) is None
        # and model_fields_set contains the field
        if self.chamber_code is None and "chamber_code" in self.model_fields_set:
            _dict['ChamberCode'] = None

        # set to None if legislation_type_code (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_type_code is None and "legislation_type_code" in self.model_fields_set:
            _dict['LegislationTypeCode'] = None

        # set to None if legislation_status (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_status is None and "legislation_status" in self.model_fields_set:
            _dict['LegislationStatus'] = None

        # set to None if patrons (nullable) is None
        # and model_fields_set contains the field
        if self.patrons is None and "patrons" in self.model_fields_set:
            _dict['Patrons'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LegislationSessionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "LegislationID": obj.get("LegislationID"),
            "LegislationNumber": obj.get("LegislationNumber"),
            "Description": obj.get("Description"),
            "ChamberCode": obj.get("ChamberCode"),
            "LegislationTypeCode": obj.get("LegislationTypeCode"),
            "LegislationKey": obj.get("LegislationKey"),
            "LegislationStatus": obj.get("LegislationStatus"),
            "Patrons": [Patron.from_dict(_item) for _item in obj["Patrons"]] if obj.get("Patrons") is not None else None
        })
        return _obj


