# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class StaffPartnerGetResponse(BaseModel):
    """
    Staff Partner Get Response
    """ # noqa: E501
    staff_id: Optional[StrictInt] = Field(default=None, description="Database Unique Indentifier for Staff", alias="StaffID")
    affiliation_id: Optional[StrictInt] = Field(default=None, description="Database Unique Indentifier for Affiliation", alias="AffiliationID")
    staff_role_type_id: Optional[StrictInt] = Field(default=None, description="Database Unique Indentifier for Staff Role Type", alias="StaffRoleTypeID")
    identity_id: Optional[StrictInt] = Field(default=None, description="Database Unique Indentifier for Identity", alias="IdentityID")
    full_name: Optional[StrictStr] = Field(default=None, description="Staff Full Name", alias="FullName")
    sequence: Optional[StrictInt] = Field(default=None, description="Staff Sequence", alias="Sequence")
    is_public: Optional[StrictBool] = Field(default=None, description="Is Staff Public Viewable", alias="IsPublic")
    effective_date: Optional[datetime] = Field(default=None, description="Staff Effective Date", alias="EffectiveDate")
    modification_date: Optional[datetime] = Field(default=None, description="Modification Date", alias="ModificationDate")
    __properties: ClassVar[List[str]] = ["StaffID", "AffiliationID", "StaffRoleTypeID", "IdentityID", "FullName", "Sequence", "IsPublic", "EffectiveDate", "ModificationDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StaffPartnerGetResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if staff_id (nullable) is None
        # and model_fields_set contains the field
        if self.staff_id is None and "staff_id" in self.model_fields_set:
            _dict['StaffID'] = None

        # set to None if affiliation_id (nullable) is None
        # and model_fields_set contains the field
        if self.affiliation_id is None and "affiliation_id" in self.model_fields_set:
            _dict['AffiliationID'] = None

        # set to None if staff_role_type_id (nullable) is None
        # and model_fields_set contains the field
        if self.staff_role_type_id is None and "staff_role_type_id" in self.model_fields_set:
            _dict['StaffRoleTypeID'] = None

        # set to None if identity_id (nullable) is None
        # and model_fields_set contains the field
        if self.identity_id is None and "identity_id" in self.model_fields_set:
            _dict['IdentityID'] = None

        # set to None if full_name (nullable) is None
        # and model_fields_set contains the field
        if self.full_name is None and "full_name" in self.model_fields_set:
            _dict['FullName'] = None

        # set to None if sequence (nullable) is None
        # and model_fields_set contains the field
        if self.sequence is None and "sequence" in self.model_fields_set:
            _dict['Sequence'] = None

        # set to None if is_public (nullable) is None
        # and model_fields_set contains the field
        if self.is_public is None and "is_public" in self.model_fields_set:
            _dict['IsPublic'] = None

        # set to None if effective_date (nullable) is None
        # and model_fields_set contains the field
        if self.effective_date is None and "effective_date" in self.model_fields_set:
            _dict['EffectiveDate'] = None

        # set to None if modification_date (nullable) is None
        # and model_fields_set contains the field
        if self.modification_date is None and "modification_date" in self.model_fields_set:
            _dict['ModificationDate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StaffPartnerGetResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "StaffID": obj.get("StaffID"),
            "AffiliationID": obj.get("AffiliationID"),
            "StaffRoleTypeID": obj.get("StaffRoleTypeID"),
            "IdentityID": obj.get("IdentityID"),
            "FullName": obj.get("FullName"),
            "Sequence": obj.get("Sequence"),
            "IsPublic": obj.get("IsPublic"),
            "EffectiveDate": obj.get("EffectiveDate"),
            "ModificationDate": obj.get("ModificationDate")
        })
        return _obj


