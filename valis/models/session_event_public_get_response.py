# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class SessionEventPublicGetResponse(BaseModel):
    """
    Session Event public Get Response
    """ # noqa: E501
    display_name: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="Session event display name", alias="DisplayName")
    actual_date: Optional[datetime] = Field(default=None, description="Actual date for the session event", alias="ActualDate")
    internal_only: Optional[StrictBool] = Field(default=None, description="Is this used internally only?", alias="InternalOnly")
    event_type_id: StrictInt = Field(description="Unique identifier for Event Type", alias="EventTypeID")
    projected_date: Optional[datetime] = Field(default=None, description="Projected date", alias="ProjectedDate")
    session_event_id: StrictInt = Field(description="Session Event unique identifier", alias="SessionEventID")
    __properties: ClassVar[List[str]] = ["DisplayName", "ActualDate", "InternalOnly", "EventTypeID", "ProjectedDate", "SessionEventID"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SessionEventPublicGetResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if display_name (nullable) is None
        # and model_fields_set contains the field
        if self.display_name is None and "display_name" in self.model_fields_set:
            _dict['DisplayName'] = None

        # set to None if actual_date (nullable) is None
        # and model_fields_set contains the field
        if self.actual_date is None and "actual_date" in self.model_fields_set:
            _dict['ActualDate'] = None

        # set to None if projected_date (nullable) is None
        # and model_fields_set contains the field
        if self.projected_date is None and "projected_date" in self.model_fields_set:
            _dict['ProjectedDate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SessionEventPublicGetResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "DisplayName": obj.get("DisplayName"),
            "ActualDate": obj.get("ActualDate"),
            "InternalOnly": obj.get("InternalOnly"),
            "EventTypeID": obj.get("EventTypeID"),
            "ProjectedDate": obj.get("ProjectedDate"),
            "SessionEventID": obj.get("SessionEventID")
        })
        return _obj


