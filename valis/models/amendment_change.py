# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from valis.models.amendment_action import AmendmentAction
from typing import Optional, Set
from typing_extensions import Self

class AmendmentChange(BaseModel):
    """
    AmendmentChange that contains list of changes in the amendment e.g: Strikes and Inserts
    """ # noqa: E501
    class_name: Optional[StrictStr] = Field(default=None, alias="ClassName")
    amendment_actions: Optional[List[AmendmentAction]] = Field(default=None, alias="AmendmentActions")
    __properties: ClassVar[List[str]] = ["ClassName", "AmendmentActions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AmendmentChange from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in amendment_actions (list)
        _items = []
        if self.amendment_actions:
            for _item_amendment_actions in self.amendment_actions:
                if _item_amendment_actions:
                    _items.append(_item_amendment_actions.to_dict())
            _dict['AmendmentActions'] = _items
        # set to None if class_name (nullable) is None
        # and model_fields_set contains the field
        if self.class_name is None and "class_name" in self.model_fields_set:
            _dict['ClassName'] = None

        # set to None if amendment_actions (nullable) is None
        # and model_fields_set contains the field
        if self.amendment_actions is None and "amendment_actions" in self.model_fields_set:
            _dict['AmendmentActions'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AmendmentChange from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ClassName": obj.get("ClassName"),
            "AmendmentActions": [AmendmentAction.from_dict(_item) for _item in obj["AmendmentActions"]] if obj.get("AmendmentActions") is not None else None
        })
        return _obj


