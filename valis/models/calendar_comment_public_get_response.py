# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CalendarCommentPublicGetResponse(BaseModel):
    """
    Calendar Comment Public Get Response
    """ # noqa: E501
    calendar_id: Optional[StrictInt] = Field(default=None, description="Calendar ID", alias="CalendarID")
    comment: Optional[StrictStr] = Field(default=None, description="Comment text", alias="Comment")
    sequence: Optional[StrictInt] = Field(default=None, description="Calendar Category Sequence", alias="Sequence")
    deletion_date: Optional[datetime] = Field(default=None, description="Deletion Date", alias="DeletionDate")
    calendar_comment_id: Optional[StrictInt] = Field(default=None, description="Calendar Comment unique identifier", alias="CalendarCommentID")
    __properties: ClassVar[List[str]] = ["CalendarID", "Comment", "Sequence", "DeletionDate", "CalendarCommentID"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CalendarCommentPublicGetResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if calendar_id (nullable) is None
        # and model_fields_set contains the field
        if self.calendar_id is None and "calendar_id" in self.model_fields_set:
            _dict['CalendarID'] = None

        # set to None if comment (nullable) is None
        # and model_fields_set contains the field
        if self.comment is None and "comment" in self.model_fields_set:
            _dict['Comment'] = None

        # set to None if sequence (nullable) is None
        # and model_fields_set contains the field
        if self.sequence is None and "sequence" in self.model_fields_set:
            _dict['Sequence'] = None

        # set to None if deletion_date (nullable) is None
        # and model_fields_set contains the field
        if self.deletion_date is None and "deletion_date" in self.model_fields_set:
            _dict['DeletionDate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CalendarCommentPublicGetResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CalendarID": obj.get("CalendarID"),
            "Comment": obj.get("Comment"),
            "Sequence": obj.get("Sequence"),
            "DeletionDate": obj.get("DeletionDate"),
            "CalendarCommentID": obj.get("CalendarCommentID")
        })
        return _obj


