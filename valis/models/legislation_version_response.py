# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from valis.models.file import File
from typing import Optional, Set
from typing_extensions import Self

class LegislationVersionResponse(BaseModel):
    """
    legislation version response
    """ # noqa: E501
    legislation_id: Optional[StrictInt] = Field(default=None, description="Legislation unique identifier", alias="LegislationID")
    legislation_number: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(default=None, description="Legislation Number (Unique for each Biennial)", alias="LegislationNumber")
    chamber_code: Optional[StrictStr] = Field(default=None, description="ChamberCode, H=House, S=Senate", alias="ChamberCode")
    session_id: Optional[StrictInt] = Field(default=None, description="Session ID", alias="SessionID")
    legislation_text_id: Optional[StrictInt] = Field(default=None, description="Legislation Text Id", alias="LegislationTextID")
    draft_date: Optional[datetime] = Field(default=None, description="Draft Date", alias="DraftDate")
    document_code: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(default=None, description="Document Number (Unique for each Biennial)", alias="DocumentCode")
    description: Optional[StrictStr] = Field(default=None, description="Legislation Text Description", alias="Description")
    sponsor: Optional[StrictStr] = Field(default=None, description="Body that authored/sponsored the Legislation Text (House/Senate/Conference/Governor)", alias="Sponsor")
    ld_number: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="Legislation Document Number", alias="LDNumber")
    legislation_version_id: Optional[StrictInt] = Field(default=None, description="Legislation Version ID", alias="LegislationVersionID")
    version: Optional[Annotated[str, Field(strict=True, max_length=250)]] = Field(default=None, description="Version", alias="Version")
    is_public: Optional[StrictBool] = Field(default=None, description="Public", alias="IsPublic")
    is_active: Optional[StrictBool] = Field(default=None, description="Active", alias="IsActive")
    pdf_file: Optional[List[File]] = Field(default=None, description="PDF File(s)", alias="PdfFile")
    html_file: Optional[List[File]] = Field(default=None, description="HTML File(s)", alias="HtmlFile")
    link_file: Optional[List[File]] = Field(default=None, description="Link File(s)", alias="LinkFile")
    impact_file: Optional[List[File]] = Field(default=None, description="Impact Statement File(s)", alias="ImpactFile")
    text_disposition_id: Optional[StrictInt] = Field(default=None, description="unique identifier for Text Disposition (e.g. 1=Offered, 2=Recommended, 3=Reported, etc)", alias="TextDispositionID")
    text_disposition: Optional[StrictStr] = Field(default=None, description="Text Disposition (e.g. Offered, Recommended, Reported, etc)", alias="TextDisposition")
    __properties: ClassVar[List[str]] = ["LegislationID", "LegislationNumber", "ChamberCode", "SessionID", "LegislationTextID", "DraftDate", "DocumentCode", "Description", "Sponsor", "LDNumber", "LegislationVersionID", "Version", "IsPublic", "IsActive", "PdfFile", "HtmlFile", "LinkFile", "ImpactFile", "TextDispositionID", "TextDisposition"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LegislationVersionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in pdf_file (list)
        _items = []
        if self.pdf_file:
            for _item_pdf_file in self.pdf_file:
                if _item_pdf_file:
                    _items.append(_item_pdf_file.to_dict())
            _dict['PdfFile'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in html_file (list)
        _items = []
        if self.html_file:
            for _item_html_file in self.html_file:
                if _item_html_file:
                    _items.append(_item_html_file.to_dict())
            _dict['HtmlFile'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in link_file (list)
        _items = []
        if self.link_file:
            for _item_link_file in self.link_file:
                if _item_link_file:
                    _items.append(_item_link_file.to_dict())
            _dict['LinkFile'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in impact_file (list)
        _items = []
        if self.impact_file:
            for _item_impact_file in self.impact_file:
                if _item_impact_file:
                    _items.append(_item_impact_file.to_dict())
            _dict['ImpactFile'] = _items
        # set to None if legislation_id (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_id is None and "legislation_id" in self.model_fields_set:
            _dict['LegislationID'] = None

        # set to None if legislation_number (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_number is None and "legislation_number" in self.model_fields_set:
            _dict['LegislationNumber'] = None

        # set to None if chamber_code (nullable) is None
        # and model_fields_set contains the field
        if self.chamber_code is None and "chamber_code" in self.model_fields_set:
            _dict['ChamberCode'] = None

        # set to None if draft_date (nullable) is None
        # and model_fields_set contains the field
        if self.draft_date is None and "draft_date" in self.model_fields_set:
            _dict['DraftDate'] = None

        # set to None if document_code (nullable) is None
        # and model_fields_set contains the field
        if self.document_code is None and "document_code" in self.model_fields_set:
            _dict['DocumentCode'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['Description'] = None

        # set to None if sponsor (nullable) is None
        # and model_fields_set contains the field
        if self.sponsor is None and "sponsor" in self.model_fields_set:
            _dict['Sponsor'] = None

        # set to None if ld_number (nullable) is None
        # and model_fields_set contains the field
        if self.ld_number is None and "ld_number" in self.model_fields_set:
            _dict['LDNumber'] = None

        # set to None if version (nullable) is None
        # and model_fields_set contains the field
        if self.version is None and "version" in self.model_fields_set:
            _dict['Version'] = None

        # set to None if pdf_file (nullable) is None
        # and model_fields_set contains the field
        if self.pdf_file is None and "pdf_file" in self.model_fields_set:
            _dict['PdfFile'] = None

        # set to None if html_file (nullable) is None
        # and model_fields_set contains the field
        if self.html_file is None and "html_file" in self.model_fields_set:
            _dict['HtmlFile'] = None

        # set to None if link_file (nullable) is None
        # and model_fields_set contains the field
        if self.link_file is None and "link_file" in self.model_fields_set:
            _dict['LinkFile'] = None

        # set to None if impact_file (nullable) is None
        # and model_fields_set contains the field
        if self.impact_file is None and "impact_file" in self.model_fields_set:
            _dict['ImpactFile'] = None

        # set to None if text_disposition_id (nullable) is None
        # and model_fields_set contains the field
        if self.text_disposition_id is None and "text_disposition_id" in self.model_fields_set:
            _dict['TextDispositionID'] = None

        # set to None if text_disposition (nullable) is None
        # and model_fields_set contains the field
        if self.text_disposition is None and "text_disposition" in self.model_fields_set:
            _dict['TextDisposition'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LegislationVersionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "LegislationID": obj.get("LegislationID"),
            "LegislationNumber": obj.get("LegislationNumber"),
            "ChamberCode": obj.get("ChamberCode"),
            "SessionID": obj.get("SessionID"),
            "LegislationTextID": obj.get("LegislationTextID"),
            "DraftDate": obj.get("DraftDate"),
            "DocumentCode": obj.get("DocumentCode"),
            "Description": obj.get("Description"),
            "Sponsor": obj.get("Sponsor"),
            "LDNumber": obj.get("LDNumber"),
            "LegislationVersionID": obj.get("LegislationVersionID"),
            "Version": obj.get("Version"),
            "IsPublic": obj.get("IsPublic"),
            "IsActive": obj.get("IsActive"),
            "PdfFile": [File.from_dict(_item) for _item in obj["PdfFile"]] if obj.get("PdfFile") is not None else None,
            "HtmlFile": [File.from_dict(_item) for _item in obj["HtmlFile"]] if obj.get("HtmlFile") is not None else None,
            "LinkFile": [File.from_dict(_item) for _item in obj["LinkFile"]] if obj.get("LinkFile") is not None else None,
            "ImpactFile": [File.from_dict(_item) for _item in obj["ImpactFile"]] if obj.get("ImpactFile") is not None else None,
            "TextDispositionID": obj.get("TextDispositionID"),
            "TextDisposition": obj.get("TextDisposition")
        })
        return _obj


