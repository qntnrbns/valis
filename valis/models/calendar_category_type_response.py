# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CalendarCategoryTypeResponse(BaseModel):
    """
    Calendar Category Type Reference Response
    """ # noqa: E501
    clerks_copy: Optional[StrictBool] = Field(default=None, alias="ClerksCopy")
    calendar_category_type_id: StrictInt = Field(description="Calendar Category unique identifier", alias="CalendarCategoryTypeID")
    category_code: StrictStr = Field(description="Category Code", alias="CategoryCode")
    description: StrictStr = Field(description="Category Type Description", alias="Description")
    plural_description: Optional[StrictStr] = Field(default=None, description="Category Type Description if plural", alias="PluralDescription")
    sequence: StrictInt = Field(description="Sequence", alias="Sequence")
    chamber_code: Optional[Annotated[str, Field(strict=True, max_length=1)]] = Field(default=None, description="Category Chamber Code (H = House, S = Senate)", alias="ChamberCode")
    calendar_type_id: StrictInt = Field(description="Calendar Type ID", alias="CalendarTypeID")
    category_type_id: StrictInt = Field(description="Category Type ID", alias="CategoryTypeID")
    category_type: Optional[StrictStr] = Field(default=None, description="Category Type", alias="CategoryType")
    display_type: Optional[StrictBool] = Field(default=None, description="Display Type", alias="DisplayType")
    legislation_type_code: Optional[StrictStr] = Field(default=None, description="Legislation Type Code", alias="LegislationTypeCode")
    legislation_chamber_code: Optional[StrictStr] = Field(default=None, description="Legislation Chamber Code", alias="LegislationChamberCode")
    is_legislation_category: StrictBool = Field(description="Legislation Indicator", alias="IsLegislationCategory")
    is_print: Optional[StrictBool] = Field(default=None, description="Printable Indicator", alias="IsPrint")
    __properties: ClassVar[List[str]] = ["ClerksCopy", "CalendarCategoryTypeID", "CategoryCode", "Description", "PluralDescription", "Sequence", "ChamberCode", "CalendarTypeID", "CategoryTypeID", "CategoryType", "DisplayType", "LegislationTypeCode", "LegislationChamberCode", "IsLegislationCategory", "IsPrint"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CalendarCategoryTypeResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if plural_description (nullable) is None
        # and model_fields_set contains the field
        if self.plural_description is None and "plural_description" in self.model_fields_set:
            _dict['PluralDescription'] = None

        # set to None if chamber_code (nullable) is None
        # and model_fields_set contains the field
        if self.chamber_code is None and "chamber_code" in self.model_fields_set:
            _dict['ChamberCode'] = None

        # set to None if category_type (nullable) is None
        # and model_fields_set contains the field
        if self.category_type is None and "category_type" in self.model_fields_set:
            _dict['CategoryType'] = None

        # set to None if legislation_type_code (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_type_code is None and "legislation_type_code" in self.model_fields_set:
            _dict['LegislationTypeCode'] = None

        # set to None if legislation_chamber_code (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_chamber_code is None and "legislation_chamber_code" in self.model_fields_set:
            _dict['LegislationChamberCode'] = None

        # set to None if is_print (nullable) is None
        # and model_fields_set contains the field
        if self.is_print is None and "is_print" in self.model_fields_set:
            _dict['IsPrint'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CalendarCategoryTypeResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ClerksCopy": obj.get("ClerksCopy"),
            "CalendarCategoryTypeID": obj.get("CalendarCategoryTypeID"),
            "CategoryCode": obj.get("CategoryCode"),
            "Description": obj.get("Description"),
            "PluralDescription": obj.get("PluralDescription"),
            "Sequence": obj.get("Sequence"),
            "ChamberCode": obj.get("ChamberCode"),
            "CalendarTypeID": obj.get("CalendarTypeID"),
            "CategoryTypeID": obj.get("CategoryTypeID"),
            "CategoryType": obj.get("CategoryType"),
            "DisplayType": obj.get("DisplayType"),
            "LegislationTypeCode": obj.get("LegislationTypeCode"),
            "LegislationChamberCode": obj.get("LegislationChamberCode"),
            "IsLegislationCategory": obj.get("IsLegislationCategory"),
            "IsPrint": obj.get("IsPrint")
        })
        return _obj


