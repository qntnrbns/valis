# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, Optional
from typing import Optional, Set
from typing_extensions import Self

class ChamberStatisticResponse(BaseModel):
    """
    Response object containing chamber statistics information. If no valid response   could be obtained, Success boolean will be false and additional information can be found   in the FailureMessage string.
    """ # noqa: E501
    chamber_code: Optional[StrictStr] = Field(default=None, description="Chamber Code", alias="ChamberCode")
    legislation_type_code: Optional[StrictStr] = Field(default=None, description="Legislation Type Code (B/J/R)", alias="LegislationTypeCode")
    introduced: Optional[StrictInt] = Field(default=None, description="number of legislation introduced", alias="Introduced")
    passed_house: Optional[StrictInt] = Field(default=None, description="number of legislation passed in the House of Delegates", alias="PassedHouse")
    passed_senate: Optional[StrictInt] = Field(default=None, description="number of legislation passed in the Senate", alias="PassedSenate")
    passed: Optional[StrictInt] = Field(default=None, description="number of legislation passed", alias="Passed")
    pending: Optional[StrictInt] = Field(default=None, description="number of legislation pending", alias="Pending")
    incorporated: Optional[StrictInt] = Field(default=None, description="number of legislation incorporated", alias="Incorporated")
    failed: Optional[StrictInt] = Field(default=None, description="number of legislation failed", alias="Failed")
    approved: Optional[StrictInt] = Field(default=None, description="number of legislation approved", alias="Approved")
    veto: Optional[StrictInt] = Field(default=None, description="number of legislation vetoed", alias="Veto")
    awaiting_gov_action: Optional[StrictInt] = Field(default=None, description="number of legislation awaiting Governor's action", alias="AwaitingGovAction")
    continued_from_last_session: Optional[StrictInt] = Field(default=None, description="number of legislation that was continued from last session", alias="ContinuedFromLastSession")
    continued_to_next_session: Optional[StrictInt] = Field(default=None, description="number of legislation that is continued to next session", alias="ContinuedToNextSession")
    __properties: ClassVar[List[str]] = ["ChamberCode", "LegislationTypeCode", "Introduced", "PassedHouse", "PassedSenate", "Passed", "Pending", "Incorporated", "Failed", "Approved", "Veto", "AwaitingGovAction", "ContinuedFromLastSession", "ContinuedToNextSession"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChamberStatisticResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if chamber_code (nullable) is None
        # and model_fields_set contains the field
        if self.chamber_code is None and "chamber_code" in self.model_fields_set:
            _dict['ChamberCode'] = None

        # set to None if legislation_type_code (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_type_code is None and "legislation_type_code" in self.model_fields_set:
            _dict['LegislationTypeCode'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChamberStatisticResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ChamberCode": obj.get("ChamberCode"),
            "LegislationTypeCode": obj.get("LegislationTypeCode"),
            "Introduced": obj.get("Introduced"),
            "PassedHouse": obj.get("PassedHouse"),
            "PassedSenate": obj.get("PassedSenate"),
            "Passed": obj.get("Passed"),
            "Pending": obj.get("Pending"),
            "Incorporated": obj.get("Incorporated"),
            "Failed": obj.get("Failed"),
            "Approved": obj.get("Approved"),
            "Veto": obj.get("Veto"),
            "AwaitingGovAction": obj.get("AwaitingGovAction"),
            "ContinuedFromLastSession": obj.get("ContinuedFromLastSession"),
            "ContinuedToNextSession": obj.get("ContinuedToNextSession")
        })
        return _obj


