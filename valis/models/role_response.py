# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class RoleResponse(BaseModel):
    """
    RoleResponse
    """ # noqa: E501
    role_id: Optional[StrictInt] = Field(default=None, alias="RoleID")
    role_name: Annotated[str, Field(strict=True, max_length=180)] = Field(alias="RoleName")
    scope: Annotated[str, Field(strict=True, max_length=25)] = Field(alias="Scope")
    resource: Annotated[str, Field(strict=True, max_length=50)] = Field(alias="Resource")
    component: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, alias="Component")
    action: Annotated[str, Field(strict=True, max_length=25)] = Field(alias="Action")
    modification_date: Optional[datetime] = Field(default=None, alias="ModificationDate")
    __properties: ClassVar[List[str]] = ["RoleID", "RoleName", "Scope", "Resource", "Component", "Action", "ModificationDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RoleResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if role_id (nullable) is None
        # and model_fields_set contains the field
        if self.role_id is None and "role_id" in self.model_fields_set:
            _dict['RoleID'] = None

        # set to None if component (nullable) is None
        # and model_fields_set contains the field
        if self.component is None and "component" in self.model_fields_set:
            _dict['Component'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RoleResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "RoleID": obj.get("RoleID"),
            "RoleName": obj.get("RoleName"),
            "Scope": obj.get("Scope"),
            "Resource": obj.get("Resource"),
            "Component": obj.get("Component"),
            "Action": obj.get("Action"),
            "ModificationDate": obj.get("ModificationDate")
        })
        return _obj


