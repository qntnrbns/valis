# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from valis.models.public_minutes_calendar import PublicMinutesCalendar
from valis.models.public_minutes_category import PublicMinutesCategory
from valis.models.public_minutes_file import PublicMinutesFile
from typing import Optional, Set
from typing_extensions import Self

class PublicMinutesBook(BaseModel):
    """
    Public Response object containing LIS Minutes Book information .
    """ # noqa: E501
    vote_room_id: Optional[StrictInt] = Field(default=None, description="Vote Room unique identifier", alias="VoteRoomID")
    session_name: Optional[StrictStr] = Field(default=None, description="Session Display Name (e.g. 2019 Regular Session)", alias="SessionName")
    session_code: Optional[StrictStr] = Field(default=None, alias="SessionCode")
    session_id: StrictInt = Field(description="Unique identifier of Session (e.g. 41 = 2018 Regular Session)", alias="SessionID")
    committee_id: Optional[StrictInt] = Field(default=None, description="Unique identifier of Committee", alias="CommitteeID")
    committee_name: Optional[StrictStr] = Field(default=None, alias="CommitteeName")
    chamber_code: Annotated[str, Field(min_length=1, strict=True, max_length=1)] = Field(description="Chamber Code (H=House/S=Senate)", alias="ChamberCode")
    minutes_date: datetime = Field(description="Minutes Date", alias="MinutesDate")
    minutes_number: Optional[StrictInt] = Field(default=None, description="Minutes Number", alias="MinutesNumber")
    minutes_status_id: Optional[StrictInt] = Field(default=None, description="Unique identifier of Minutes Status", alias="MinutesStatusID")
    minutes_status: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="Minutes Status (eg. Closed, Created...)", alias="MinutesStatus")
    minutes_book_id: Optional[StrictInt] = Field(default=None, description="Minutes unique identifier", alias="MinutesBookID")
    minutes_categories: Optional[List[PublicMinutesCategory]] = Field(default=None, description="Collection of associated categories", alias="MinutesCategories")
    minutes_calendars: Optional[List[PublicMinutesCalendar]] = Field(default=None, description="Collection of associated Calendars", alias="MinutesCalendars")
    minutes_files: Optional[List[PublicMinutesFile]] = Field(default=None, description="Collection of associated Files", alias="MinutesFiles")
    __properties: ClassVar[List[str]] = ["VoteRoomID", "SessionName", "SessionCode", "SessionID", "CommitteeID", "CommitteeName", "ChamberCode", "MinutesDate", "MinutesNumber", "MinutesStatusID", "MinutesStatus", "MinutesBookID", "MinutesCategories", "MinutesCalendars", "MinutesFiles"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicMinutesBook from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in minutes_categories (list)
        _items = []
        if self.minutes_categories:
            for _item_minutes_categories in self.minutes_categories:
                if _item_minutes_categories:
                    _items.append(_item_minutes_categories.to_dict())
            _dict['MinutesCategories'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in minutes_calendars (list)
        _items = []
        if self.minutes_calendars:
            for _item_minutes_calendars in self.minutes_calendars:
                if _item_minutes_calendars:
                    _items.append(_item_minutes_calendars.to_dict())
            _dict['MinutesCalendars'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in minutes_files (list)
        _items = []
        if self.minutes_files:
            for _item_minutes_files in self.minutes_files:
                if _item_minutes_files:
                    _items.append(_item_minutes_files.to_dict())
            _dict['MinutesFiles'] = _items
        # set to None if vote_room_id (nullable) is None
        # and model_fields_set contains the field
        if self.vote_room_id is None and "vote_room_id" in self.model_fields_set:
            _dict['VoteRoomID'] = None

        # set to None if session_name (nullable) is None
        # and model_fields_set contains the field
        if self.session_name is None and "session_name" in self.model_fields_set:
            _dict['SessionName'] = None

        # set to None if session_code (nullable) is None
        # and model_fields_set contains the field
        if self.session_code is None and "session_code" in self.model_fields_set:
            _dict['SessionCode'] = None

        # set to None if committee_id (nullable) is None
        # and model_fields_set contains the field
        if self.committee_id is None and "committee_id" in self.model_fields_set:
            _dict['CommitteeID'] = None

        # set to None if committee_name (nullable) is None
        # and model_fields_set contains the field
        if self.committee_name is None and "committee_name" in self.model_fields_set:
            _dict['CommitteeName'] = None

        # set to None if minutes_number (nullable) is None
        # and model_fields_set contains the field
        if self.minutes_number is None and "minutes_number" in self.model_fields_set:
            _dict['MinutesNumber'] = None

        # set to None if minutes_status_id (nullable) is None
        # and model_fields_set contains the field
        if self.minutes_status_id is None and "minutes_status_id" in self.model_fields_set:
            _dict['MinutesStatusID'] = None

        # set to None if minutes_status (nullable) is None
        # and model_fields_set contains the field
        if self.minutes_status is None and "minutes_status" in self.model_fields_set:
            _dict['MinutesStatus'] = None

        # set to None if minutes_categories (nullable) is None
        # and model_fields_set contains the field
        if self.minutes_categories is None and "minutes_categories" in self.model_fields_set:
            _dict['MinutesCategories'] = None

        # set to None if minutes_calendars (nullable) is None
        # and model_fields_set contains the field
        if self.minutes_calendars is None and "minutes_calendars" in self.model_fields_set:
            _dict['MinutesCalendars'] = None

        # set to None if minutes_files (nullable) is None
        # and model_fields_set contains the field
        if self.minutes_files is None and "minutes_files" in self.model_fields_set:
            _dict['MinutesFiles'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicMinutesBook from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "VoteRoomID": obj.get("VoteRoomID"),
            "SessionName": obj.get("SessionName"),
            "SessionCode": obj.get("SessionCode"),
            "SessionID": obj.get("SessionID"),
            "CommitteeID": obj.get("CommitteeID"),
            "CommitteeName": obj.get("CommitteeName"),
            "ChamberCode": obj.get("ChamberCode"),
            "MinutesDate": obj.get("MinutesDate"),
            "MinutesNumber": obj.get("MinutesNumber"),
            "MinutesStatusID": obj.get("MinutesStatusID"),
            "MinutesStatus": obj.get("MinutesStatus"),
            "MinutesBookID": obj.get("MinutesBookID"),
            "MinutesCategories": [PublicMinutesCategory.from_dict(_item) for _item in obj["MinutesCategories"]] if obj.get("MinutesCategories") is not None else None,
            "MinutesCalendars": [PublicMinutesCalendar.from_dict(_item) for _item in obj["MinutesCalendars"]] if obj.get("MinutesCalendars") is not None else None,
            "MinutesFiles": [PublicMinutesFile.from_dict(_item) for _item in obj["MinutesFiles"]] if obj.get("MinutesFiles") is not None else None
        })
        return _obj


