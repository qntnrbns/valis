# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PublicPersonResponse(BaseModel):
    """
    Public Response object containing LIS person information. If no valid response   could be obtained, Success boolean will be false and additional information can be found   in the FailureMessage string.
    """ # noqa: E501
    identity_id: Optional[StrictInt] = Field(default=None, description="Person unique identifier", alias="IdentityID")
    full_name: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="Full Name", alias="FullName")
    first_name: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="First Name", alias="FirstName")
    middle_name: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="Middle Name or Initial", alias="MiddleName")
    last_name: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="Last Name", alias="LastName")
    prefix: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(default=None, description="Prefix like Mr, Mrs or Sir", alias="Prefix")
    suffix: Optional[Annotated[str, Field(strict=True, max_length=15)]] = Field(default=None, description="Suffix like Sr.or Jr.", alias="Suffix")
    alternate_name: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="Alternate Name", alias="AlternateName")
    creation_date: Optional[datetime] = Field(default=None, description="Creation Date", alias="CreationDate")
    __properties: ClassVar[List[str]] = ["IdentityID", "FullName", "FirstName", "MiddleName", "LastName", "Prefix", "Suffix", "AlternateName", "CreationDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicPersonResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if identity_id (nullable) is None
        # and model_fields_set contains the field
        if self.identity_id is None and "identity_id" in self.model_fields_set:
            _dict['IdentityID'] = None

        # set to None if full_name (nullable) is None
        # and model_fields_set contains the field
        if self.full_name is None and "full_name" in self.model_fields_set:
            _dict['FullName'] = None

        # set to None if first_name (nullable) is None
        # and model_fields_set contains the field
        if self.first_name is None and "first_name" in self.model_fields_set:
            _dict['FirstName'] = None

        # set to None if middle_name (nullable) is None
        # and model_fields_set contains the field
        if self.middle_name is None and "middle_name" in self.model_fields_set:
            _dict['MiddleName'] = None

        # set to None if last_name (nullable) is None
        # and model_fields_set contains the field
        if self.last_name is None and "last_name" in self.model_fields_set:
            _dict['LastName'] = None

        # set to None if prefix (nullable) is None
        # and model_fields_set contains the field
        if self.prefix is None and "prefix" in self.model_fields_set:
            _dict['Prefix'] = None

        # set to None if suffix (nullable) is None
        # and model_fields_set contains the field
        if self.suffix is None and "suffix" in self.model_fields_set:
            _dict['Suffix'] = None

        # set to None if alternate_name (nullable) is None
        # and model_fields_set contains the field
        if self.alternate_name is None and "alternate_name" in self.model_fields_set:
            _dict['AlternateName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicPersonResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "IdentityID": obj.get("IdentityID"),
            "FullName": obj.get("FullName"),
            "FirstName": obj.get("FirstName"),
            "MiddleName": obj.get("MiddleName"),
            "LastName": obj.get("LastName"),
            "Prefix": obj.get("Prefix"),
            "Suffix": obj.get("Suffix"),
            "AlternateName": obj.get("AlternateName"),
            "CreationDate": obj.get("CreationDate")
        })
        return _obj


