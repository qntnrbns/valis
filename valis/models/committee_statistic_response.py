# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, Optional
from typing import Optional, Set
from typing_extensions import Self

class CommitteeStatisticResponse(BaseModel):
    """
    Response object containing committee statistics information. If no valid response   could be obtained, Success boolean will be false and additional information can be found   in the FailureMessage string.
    """ # noqa: E501
    committee_id: Optional[StrictInt] = Field(default=None, description="unique identifier for Committee", alias="CommitteeID")
    committee_number: Optional[StrictStr] = Field(default=None, description="unique number for Committee", alias="CommitteeNumber")
    committee_name: Optional[StrictStr] = Field(default=None, description="name for Committee", alias="CommitteeName")
    h_referred: Optional[StrictInt] = Field(default=None, description="number of legislation referred to the committee from the House", alias="HReferred")
    s_referred: Optional[StrictInt] = Field(default=None, description="number of legislation referred to the committee from the Senate", alias="SReferred")
    hin_committee: Optional[StrictInt] = Field(default=None, description="number of legislation currently in committee from the House", alias="HInCommittee")
    sin_committee: Optional[StrictInt] = Field(default=None, description="number of legislation currently in committee from the Senate", alias="SInCommittee")
    hin_sub_committee: Optional[StrictInt] = Field(default=None, description="number of legislation currently in subcommittee from the House", alias="HInSubCommittee")
    sin_sub_committee: Optional[StrictInt] = Field(default=None, description="number of legislation currently in subcommittee from the Senate", alias="SInSubCommittee")
    h_reported: Optional[StrictInt] = Field(default=None, description="number of legislation reported out from committee from the House", alias="HReported")
    s_reported: Optional[StrictInt] = Field(default=None, description="number of legislation reported out from committee from the Senate", alias="SReported")
    h_incorporated: Optional[StrictInt] = Field(default=None, description="number of legislation incorporated from committee from the House", alias="HIncorporated")
    s_incorporated: Optional[StrictInt] = Field(default=None, description="number of legislation incorporated from committee from the Senate", alias="SIncorporated")
    h_continued: Optional[StrictInt] = Field(default=None, description="number of legislation continued from the House", alias="HContinued")
    s_continued: Optional[StrictInt] = Field(default=None, description="number of legislation continued from the Senate", alias="SContinued")
    h_continued_from: Optional[StrictInt] = Field(default=None, description="number of legislation continued from committee from the House", alias="HContinuedFrom")
    s_continued_from: Optional[StrictInt] = Field(default=None, description="number of legislation continued from committee from the Senate", alias="SContinuedFrom")
    h_failed: Optional[StrictInt] = Field(default=None, description="number of legislation failed from committee from the House", alias="HFailed")
    s_failed: Optional[StrictInt] = Field(default=None, description="number of legislation failed from committee from the Senate", alias="SFailed")
    __properties: ClassVar[List[str]] = ["CommitteeID", "CommitteeNumber", "CommitteeName", "HReferred", "SReferred", "HInCommittee", "SInCommittee", "HInSubCommittee", "SInSubCommittee", "HReported", "SReported", "HIncorporated", "SIncorporated", "HContinued", "SContinued", "HContinuedFrom", "SContinuedFrom", "HFailed", "SFailed"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CommitteeStatisticResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if committee_number (nullable) is None
        # and model_fields_set contains the field
        if self.committee_number is None and "committee_number" in self.model_fields_set:
            _dict['CommitteeNumber'] = None

        # set to None if committee_name (nullable) is None
        # and model_fields_set contains the field
        if self.committee_name is None and "committee_name" in self.model_fields_set:
            _dict['CommitteeName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CommitteeStatisticResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CommitteeID": obj.get("CommitteeID"),
            "CommitteeNumber": obj.get("CommitteeNumber"),
            "CommitteeName": obj.get("CommitteeName"),
            "HReferred": obj.get("HReferred"),
            "SReferred": obj.get("SReferred"),
            "HInCommittee": obj.get("HInCommittee"),
            "SInCommittee": obj.get("SInCommittee"),
            "HInSubCommittee": obj.get("HInSubCommittee"),
            "SInSubCommittee": obj.get("SInSubCommittee"),
            "HReported": obj.get("HReported"),
            "SReported": obj.get("SReported"),
            "HIncorporated": obj.get("HIncorporated"),
            "SIncorporated": obj.get("SIncorporated"),
            "HContinued": obj.get("HContinued"),
            "SContinued": obj.get("SContinued"),
            "HContinuedFrom": obj.get("HContinuedFrom"),
            "SContinuedFrom": obj.get("SContinuedFrom"),
            "HFailed": obj.get("HFailed"),
            "SFailed": obj.get("SFailed")
        })
        return _obj


