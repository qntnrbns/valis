# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PublicEventReferenceResponse(BaseModel):
    """
    Information for a public Legislation Event Reference
    """ # noqa: E501
    event_reference_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Event Reference", alias="EventReferenceID")
    reference_text: Optional[Annotated[str, Field(strict=True, max_length=1000)]] = Field(default=None, description="Event Reference Text", alias="ReferenceText")
    reference_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Reference", alias="ReferenceID")
    legislation_event_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Legislation Event", alias="LegislationEventID")
    action_reference_type_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Action Reference Type", alias="ActionReferenceTypeID")
    action_reference_type: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="Action Reference Text", alias="ActionReferenceType")
    sequence: Optional[StrictInt] = Field(default=None, description="Sequence", alias="Sequence")
    __properties: ClassVar[List[str]] = ["EventReferenceID", "ReferenceText", "ReferenceID", "LegislationEventID", "ActionReferenceTypeID", "ActionReferenceType", "Sequence"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicEventReferenceResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if event_reference_id (nullable) is None
        # and model_fields_set contains the field
        if self.event_reference_id is None and "event_reference_id" in self.model_fields_set:
            _dict['EventReferenceID'] = None

        # set to None if reference_text (nullable) is None
        # and model_fields_set contains the field
        if self.reference_text is None and "reference_text" in self.model_fields_set:
            _dict['ReferenceText'] = None

        # set to None if reference_id (nullable) is None
        # and model_fields_set contains the field
        if self.reference_id is None and "reference_id" in self.model_fields_set:
            _dict['ReferenceID'] = None

        # set to None if legislation_event_id (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_event_id is None and "legislation_event_id" in self.model_fields_set:
            _dict['LegislationEventID'] = None

        # set to None if action_reference_type_id (nullable) is None
        # and model_fields_set contains the field
        if self.action_reference_type_id is None and "action_reference_type_id" in self.model_fields_set:
            _dict['ActionReferenceTypeID'] = None

        # set to None if action_reference_type (nullable) is None
        # and model_fields_set contains the field
        if self.action_reference_type is None and "action_reference_type" in self.model_fields_set:
            _dict['ActionReferenceType'] = None

        # set to None if sequence (nullable) is None
        # and model_fields_set contains the field
        if self.sequence is None and "sequence" in self.model_fields_set:
            _dict['Sequence'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicEventReferenceResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "EventReferenceID": obj.get("EventReferenceID"),
            "ReferenceText": obj.get("ReferenceText"),
            "ReferenceID": obj.get("ReferenceID"),
            "LegislationEventID": obj.get("LegislationEventID"),
            "ActionReferenceTypeID": obj.get("ActionReferenceTypeID"),
            "ActionReferenceType": obj.get("ActionReferenceType"),
            "Sequence": obj.get("Sequence")
        })
        return _obj


