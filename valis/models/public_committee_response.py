# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from valis.models.public_committee_file_response import PublicCommitteeFileResponse
from typing import Optional, Set
from typing_extensions import Self

class PublicCommitteeResponse(BaseModel):
    """
    Information for public Committee
    """ # noqa: E501
    name: Annotated[str, Field(strict=True, max_length=100)] = Field(description="Committee name", alias="Name")
    committee_number: Annotated[str, Field(strict=True, max_length=10)] = Field(description="Committee number (e.g. S12)", alias="CommitteeNumber")
    chamber_code: Annotated[str, Field(min_length=1, strict=True, max_length=1)] = Field(description="Chamber code (H/S) for which committee belongs", alias="ChamberCode")
    session_code: Optional[StrictStr] = Field(default=None, description="Session code (e.g. 20181)", alias="SessionCode")
    twitter_handle: Optional[Annotated[str, Field(strict=True, max_length=15)]] = Field(default=None, description="Twitter username/handle", alias="TwitterHandle")
    twitter_email: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="Twitter email address", alias="TwitterEmail")
    parent_committee_id: Optional[StrictInt] = Field(default=None, description="Unique Identifier for Parent Committee", alias="ParentCommitteeID")
    service_end_date: Optional[datetime] = Field(default=None, description="End date of Service for this Committee", alias="ServiceEndDate")
    service_begin_date: Optional[datetime] = Field(default=None, description="Begin date of Service for this Committee", alias="ServiceBeginDate")
    effective_begin_date: Optional[datetime] = Field(default=None, description="Effective begin date", alias="EffectiveBeginDate")
    effective_end_date: Optional[datetime] = Field(default=None, description="Effective ending date", alias="EffectiveEndDate")
    abbreviation: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(default=None, description="Committee abbreviation", alias="Abbreviation")
    description: Optional[Annotated[str, Field(strict=True, max_length=1000)]] = Field(default=None, description="Committee description", alias="Description")
    meeting_note: Optional[Annotated[str, Field(strict=True, max_length=1000)]] = Field(default=None, description="Committee meeting note", alias="MeetingNote")
    pending_change: Optional[StrictBool] = Field(default=None, description="Are there any pending changes?", alias="PendingChange")
    sub_pending_change: Optional[StrictBool] = Field(default=None, description="Are there any pending changes for Subcommittee?", alias="SubPendingChange")
    is_public: Optional[StrictBool] = Field(default=None, description="Is this public?", alias="IsPublic")
    agenda_url: Optional[StrictStr] = Field(default=None, description="Agenda link for committees and subcommittees", alias="AgendaURL")
    committee_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Committee", alias="CommitteeID")
    committee_files: Optional[List[PublicCommitteeFileResponse]] = Field(default=None, description="List of Committee Files", alias="CommitteeFiles")
    __properties: ClassVar[List[str]] = ["Name", "CommitteeNumber", "ChamberCode", "SessionCode", "TwitterHandle", "TwitterEmail", "ParentCommitteeID", "ServiceEndDate", "ServiceBeginDate", "EffectiveBeginDate", "EffectiveEndDate", "Abbreviation", "Description", "MeetingNote", "PendingChange", "SubPendingChange", "IsPublic", "AgendaURL", "CommitteeID", "CommitteeFiles"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicCommitteeResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in committee_files (list)
        _items = []
        if self.committee_files:
            for _item_committee_files in self.committee_files:
                if _item_committee_files:
                    _items.append(_item_committee_files.to_dict())
            _dict['CommitteeFiles'] = _items
        # set to None if session_code (nullable) is None
        # and model_fields_set contains the field
        if self.session_code is None and "session_code" in self.model_fields_set:
            _dict['SessionCode'] = None

        # set to None if twitter_handle (nullable) is None
        # and model_fields_set contains the field
        if self.twitter_handle is None and "twitter_handle" in self.model_fields_set:
            _dict['TwitterHandle'] = None

        # set to None if twitter_email (nullable) is None
        # and model_fields_set contains the field
        if self.twitter_email is None and "twitter_email" in self.model_fields_set:
            _dict['TwitterEmail'] = None

        # set to None if parent_committee_id (nullable) is None
        # and model_fields_set contains the field
        if self.parent_committee_id is None and "parent_committee_id" in self.model_fields_set:
            _dict['ParentCommitteeID'] = None

        # set to None if service_end_date (nullable) is None
        # and model_fields_set contains the field
        if self.service_end_date is None and "service_end_date" in self.model_fields_set:
            _dict['ServiceEndDate'] = None

        # set to None if service_begin_date (nullable) is None
        # and model_fields_set contains the field
        if self.service_begin_date is None and "service_begin_date" in self.model_fields_set:
            _dict['ServiceBeginDate'] = None

        # set to None if effective_begin_date (nullable) is None
        # and model_fields_set contains the field
        if self.effective_begin_date is None and "effective_begin_date" in self.model_fields_set:
            _dict['EffectiveBeginDate'] = None

        # set to None if effective_end_date (nullable) is None
        # and model_fields_set contains the field
        if self.effective_end_date is None and "effective_end_date" in self.model_fields_set:
            _dict['EffectiveEndDate'] = None

        # set to None if abbreviation (nullable) is None
        # and model_fields_set contains the field
        if self.abbreviation is None and "abbreviation" in self.model_fields_set:
            _dict['Abbreviation'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['Description'] = None

        # set to None if meeting_note (nullable) is None
        # and model_fields_set contains the field
        if self.meeting_note is None and "meeting_note" in self.model_fields_set:
            _dict['MeetingNote'] = None

        # set to None if pending_change (nullable) is None
        # and model_fields_set contains the field
        if self.pending_change is None and "pending_change" in self.model_fields_set:
            _dict['PendingChange'] = None

        # set to None if sub_pending_change (nullable) is None
        # and model_fields_set contains the field
        if self.sub_pending_change is None and "sub_pending_change" in self.model_fields_set:
            _dict['SubPendingChange'] = None

        # set to None if is_public (nullable) is None
        # and model_fields_set contains the field
        if self.is_public is None and "is_public" in self.model_fields_set:
            _dict['IsPublic'] = None

        # set to None if agenda_url (nullable) is None
        # and model_fields_set contains the field
        if self.agenda_url is None and "agenda_url" in self.model_fields_set:
            _dict['AgendaURL'] = None

        # set to None if committee_files (nullable) is None
        # and model_fields_set contains the field
        if self.committee_files is None and "committee_files" in self.model_fields_set:
            _dict['CommitteeFiles'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicCommitteeResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Name": obj.get("Name"),
            "CommitteeNumber": obj.get("CommitteeNumber"),
            "ChamberCode": obj.get("ChamberCode"),
            "SessionCode": obj.get("SessionCode"),
            "TwitterHandle": obj.get("TwitterHandle"),
            "TwitterEmail": obj.get("TwitterEmail"),
            "ParentCommitteeID": obj.get("ParentCommitteeID"),
            "ServiceEndDate": obj.get("ServiceEndDate"),
            "ServiceBeginDate": obj.get("ServiceBeginDate"),
            "EffectiveBeginDate": obj.get("EffectiveBeginDate"),
            "EffectiveEndDate": obj.get("EffectiveEndDate"),
            "Abbreviation": obj.get("Abbreviation"),
            "Description": obj.get("Description"),
            "MeetingNote": obj.get("MeetingNote"),
            "PendingChange": obj.get("PendingChange"),
            "SubPendingChange": obj.get("SubPendingChange"),
            "IsPublic": obj.get("IsPublic"),
            "AgendaURL": obj.get("AgendaURL"),
            "CommitteeID": obj.get("CommitteeID"),
            "CommitteeFiles": [PublicCommitteeFileResponse.from_dict(_item) for _item in obj["CommitteeFiles"]] if obj.get("CommitteeFiles") is not None else None
        })
        return _obj


