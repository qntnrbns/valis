# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class MemberByCommitteeSearchResponse(BaseModel):
    """
    Search information for a Member by Committee
    """ # noqa: E501
    committee_member_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for this Committee Member", alias="CommitteeMemberID")
    committee_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for this Committee", alias="CommitteeID")
    session_code: Optional[StrictStr] = Field(default=None, description="Session code (e.g. 20181)", alias="SessionCode")
    member_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Member", alias="MemberID")
    member_display_name: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="Member's Name to be displayed", alias="MemberDisplayName")
    patron_display_name: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="Patron Display Name", alias="PatronDisplayName")
    voting_sequence: Optional[StrictInt] = Field(default=None, description="Member voting order", alias="VotingSequence")
    seniority: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(default=None, description="Member seniority ranking", alias="Seniority")
    committee_role_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Committee Role", alias="CommitteeRoleID")
    committee_role_title: Optional[StrictStr] = Field(default=None, description="Committee Role title", alias="CommitteeRoleTitle")
    assign_date: Optional[datetime] = Field(default=None, description="Assignment date", alias="AssignDate")
    remove_date: Optional[datetime] = Field(default=None, description="Removal date", alias="RemoveDate")
    is_public: Optional[StrictBool] = Field(default=None, description="Is this Member by Committee public?", alias="IsPublic")
    member_number: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(default=None, description="Member number (e.g. H289)", alias="MemberNumber")
    __properties: ClassVar[List[str]] = ["CommitteeMemberID", "CommitteeID", "SessionCode", "MemberID", "MemberDisplayName", "PatronDisplayName", "VotingSequence", "Seniority", "CommitteeRoleID", "CommitteeRoleTitle", "AssignDate", "RemoveDate", "IsPublic", "MemberNumber"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MemberByCommitteeSearchResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if session_code (nullable) is None
        # and model_fields_set contains the field
        if self.session_code is None and "session_code" in self.model_fields_set:
            _dict['SessionCode'] = None

        # set to None if member_display_name (nullable) is None
        # and model_fields_set contains the field
        if self.member_display_name is None and "member_display_name" in self.model_fields_set:
            _dict['MemberDisplayName'] = None

        # set to None if patron_display_name (nullable) is None
        # and model_fields_set contains the field
        if self.patron_display_name is None and "patron_display_name" in self.model_fields_set:
            _dict['PatronDisplayName'] = None

        # set to None if committee_role_title (nullable) is None
        # and model_fields_set contains the field
        if self.committee_role_title is None and "committee_role_title" in self.model_fields_set:
            _dict['CommitteeRoleTitle'] = None

        # set to None if assign_date (nullable) is None
        # and model_fields_set contains the field
        if self.assign_date is None and "assign_date" in self.model_fields_set:
            _dict['AssignDate'] = None

        # set to None if remove_date (nullable) is None
        # and model_fields_set contains the field
        if self.remove_date is None and "remove_date" in self.model_fields_set:
            _dict['RemoveDate'] = None

        # set to None if is_public (nullable) is None
        # and model_fields_set contains the field
        if self.is_public is None and "is_public" in self.model_fields_set:
            _dict['IsPublic'] = None

        # set to None if member_number (nullable) is None
        # and model_fields_set contains the field
        if self.member_number is None and "member_number" in self.model_fields_set:
            _dict['MemberNumber'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MemberByCommitteeSearchResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CommitteeMemberID": obj.get("CommitteeMemberID"),
            "CommitteeID": obj.get("CommitteeID"),
            "SessionCode": obj.get("SessionCode"),
            "MemberID": obj.get("MemberID"),
            "MemberDisplayName": obj.get("MemberDisplayName"),
            "PatronDisplayName": obj.get("PatronDisplayName"),
            "VotingSequence": obj.get("VotingSequence"),
            "Seniority": obj.get("Seniority"),
            "CommitteeRoleID": obj.get("CommitteeRoleID"),
            "CommitteeRoleTitle": obj.get("CommitteeRoleTitle"),
            "AssignDate": obj.get("AssignDate"),
            "RemoveDate": obj.get("RemoveDate"),
            "IsPublic": obj.get("IsPublic"),
            "MemberNumber": obj.get("MemberNumber")
        })
        return _obj


