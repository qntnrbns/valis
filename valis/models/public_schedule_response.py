# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PublicScheduleResponse(BaseModel):
    """
    Public Schedule
    """ # noqa: E501
    display_sequence: Optional[StrictInt] = Field(default=None, description="optional display sequence", alias="DisplaySequence")
    owner_id: Optional[StrictInt] = Field(default=None, description="id for schedule owner", alias="OwnerID")
    owner_name: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="owner's name", alias="OwnerName")
    schedule_type_id: Optional[StrictInt] = Field(default=None, description="id for schedule type", alias="ScheduleTypeID")
    schedule_type: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="Schedule Type Name", alias="ScheduleType")
    vote_room_id: Optional[StrictInt] = Field(default=None, description="id for vote room", alias="VoteRoomID")
    room_description: Optional[Annotated[str, Field(strict=True, max_length=250)]] = Field(default=None, description="Room Description", alias="RoomDescription")
    schedule_date: Optional[date] = Field(default=None, description="schedule Date", alias="ScheduleDate")
    schedule_time: Optional[StrictStr] = Field(default=None, description="schedule Time", alias="ScheduleTime")
    comments: Optional[Annotated[str, Field(strict=True, max_length=1000)]] = Field(default=None, description="Comments", alias="Comments")
    is_cancelled: Optional[StrictBool] = Field(default=None, description="is this canceled", alias="IsCancelled")
    is_public: Optional[StrictBool] = Field(default=None, description="is this publicly viewable", alias="IsPublic")
    link_url: Optional[StrictStr] = Field(default=None, description="LinkURL", alias="LinkURL")
    schedule_id: Optional[StrictInt] = Field(default=None, description="id for schedule", alias="ScheduleID")
    version_sequence: Optional[StrictInt] = Field(default=None, description="Version Sequence number - used for iCalendar (ICS) file versioning; automatically incremented by database when updates are made", alias="VersionSequence")
    __properties: ClassVar[List[str]] = ["DisplaySequence", "OwnerID", "OwnerName", "ScheduleTypeID", "ScheduleType", "VoteRoomID", "RoomDescription", "ScheduleDate", "ScheduleTime", "Comments", "IsCancelled", "IsPublic", "LinkURL", "ScheduleID", "VersionSequence"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicScheduleResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if display_sequence (nullable) is None
        # and model_fields_set contains the field
        if self.display_sequence is None and "display_sequence" in self.model_fields_set:
            _dict['DisplaySequence'] = None

        # set to None if owner_id (nullable) is None
        # and model_fields_set contains the field
        if self.owner_id is None and "owner_id" in self.model_fields_set:
            _dict['OwnerID'] = None

        # set to None if owner_name (nullable) is None
        # and model_fields_set contains the field
        if self.owner_name is None and "owner_name" in self.model_fields_set:
            _dict['OwnerName'] = None

        # set to None if schedule_type_id (nullable) is None
        # and model_fields_set contains the field
        if self.schedule_type_id is None and "schedule_type_id" in self.model_fields_set:
            _dict['ScheduleTypeID'] = None

        # set to None if schedule_type (nullable) is None
        # and model_fields_set contains the field
        if self.schedule_type is None and "schedule_type" in self.model_fields_set:
            _dict['ScheduleType'] = None

        # set to None if vote_room_id (nullable) is None
        # and model_fields_set contains the field
        if self.vote_room_id is None and "vote_room_id" in self.model_fields_set:
            _dict['VoteRoomID'] = None

        # set to None if room_description (nullable) is None
        # and model_fields_set contains the field
        if self.room_description is None and "room_description" in self.model_fields_set:
            _dict['RoomDescription'] = None

        # set to None if schedule_time (nullable) is None
        # and model_fields_set contains the field
        if self.schedule_time is None and "schedule_time" in self.model_fields_set:
            _dict['ScheduleTime'] = None

        # set to None if comments (nullable) is None
        # and model_fields_set contains the field
        if self.comments is None and "comments" in self.model_fields_set:
            _dict['Comments'] = None

        # set to None if link_url (nullable) is None
        # and model_fields_set contains the field
        if self.link_url is None and "link_url" in self.model_fields_set:
            _dict['LinkURL'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicScheduleResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "DisplaySequence": obj.get("DisplaySequence"),
            "OwnerID": obj.get("OwnerID"),
            "OwnerName": obj.get("OwnerName"),
            "ScheduleTypeID": obj.get("ScheduleTypeID"),
            "ScheduleType": obj.get("ScheduleType"),
            "VoteRoomID": obj.get("VoteRoomID"),
            "RoomDescription": obj.get("RoomDescription"),
            "ScheduleDate": obj.get("ScheduleDate"),
            "ScheduleTime": obj.get("ScheduleTime"),
            "Comments": obj.get("Comments"),
            "IsCancelled": obj.get("IsCancelled"),
            "IsPublic": obj.get("IsPublic"),
            "LinkURL": obj.get("LinkURL"),
            "ScheduleID": obj.get("ScheduleID"),
            "VersionSequence": obj.get("VersionSequence")
        })
        return _obj


