# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from valis.models.amendment_item import AmendmentItem
from valis.models.html_file import HTMLFile
from valis.models.impact_file import ImpactFile
from valis.models.json_file import JSONFile
from valis.models.link_file import LinkFile
from valis.models.patron_base_model import PatronBaseModel
from valis.models.pdf_file import PDFFile
from typing import Optional, Set
from typing_extensions import Self

class LegislationTextGetResponse(BaseModel):
    """
    Response object containing LIS legislation Text information. If no valid response could be obtained, Success    boolean will be false and additional information can be found in the FailureMessage string.
    """ # noqa: E501
    legislation_text_id: Optional[StrictInt] = Field(default=None, description="LIS Text Id", alias="LegislationTextID")
    legislation_draft_id: Optional[StrictInt] = Field(default=None, description="LIS Draft Id", alias="LegislationDraftID")
    text_format: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="LIS TextFormat PDF, HTML or Impact", alias="TextFormat")
    text_format_id: Optional[StrictInt] = Field(default=None, description="LIS TextFormat Id 1=pdf, 2=html, 3=impact statement", alias="TextFormatID")
    legislation_version_id: Optional[StrictInt] = Field(default=None, description="LIS Legislation Version Id", alias="LegislationVersionID")
    legislation_version: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="LIS Legislation Version Name", alias="LegislationVersion")
    legislation_id: Optional[StrictInt] = Field(default=None, description="LIS Legislation Database Unique Id", alias="LegislationID")
    legislation_number: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(default=None, description="LIS Legislation Number, eg. SB1011", alias="LegislationNumber")
    chamber_code: Optional[StrictStr] = Field(default=None, description="Legislation Text Chamber Code", alias="ChamberCode")
    legislation_chamber_code: Optional[StrictStr] = Field(default=None, description="Legislation Chamber Code", alias="LegislationChamberCode")
    session_code: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(default=None, description="Session Code", alias="SessionCode")
    legislation_text_action_id: Optional[StrictInt] = Field(default=None, description="LIS Legislation Text Action Id", alias="LegislationTextActionID")
    document_code: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(default=None, description="bill number with versioning (legacy) eg., HB11H1", alias="DocumentCode")
    draft_text: Optional[StrictStr] = Field(default=None, description="LIS legislation text", alias="DraftText")
    draft_title: Optional[StrictStr] = Field(default=None, description="LIS legislation title or LDTtitle --typical for most bills, but not required for all legislation", alias="DraftTitle")
    ld_number: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="LIS legislation Document Number (LDNummber)", alias="LDNumber")
    version_date: Optional[datetime] = Field(default=None, description="Text Version Date", alias="VersionDate")
    release_to_print: Optional[datetime] = Field(default=None, description="Release To Print Date", alias="ReleaseToPrint")
    version_code: Optional[Annotated[str, Field(strict=True, max_length=5)]] = Field(default=None, description="Version Code", alias="VersionCode")
    event_code: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(default=None, description="Event Code", alias="EventCode")
    doc_url: Optional[Annotated[str, Field(strict=True, max_length=250)]] = Field(default=None, description="DocUrl", alias="DocURL")
    link_url: Optional[Annotated[str, Field(strict=True, max_length=250)]] = Field(default=None, description="LinkUrl", alias="LinkURL")
    description: Optional[Annotated[str, Field(strict=True, max_length=250)]] = Field(default=None, description="Legislation Text Description", alias="Description")
    sponsor: Optional[StrictStr] = Field(default=None, description="Body that authored/sponsored the Legislation Text (House/Senate/Conference/Governor)", alias="Sponsor")
    sponsor_type_id: Optional[StrictInt] = Field(default=None, description="unique identifier for sponsor type (e.g. 1=House of Delegates, 2=Senate, 3=Committee, 4=Member, etc)", alias="SponsorTypeID")
    session_year: Optional[StrictInt] = Field(default=None, description="Legislation Session Year", alias="SessionYear")
    is_public: StrictBool = Field(description="Is this text available to the public", alias="IsPublic")
    is_active: StrictBool = Field(description="Is this text active", alias="IsActive")
    is_complete: Optional[StrictBool] = Field(default=None, description="Is complete?", alias="IsComplete")
    is_ihod: Optional[StrictBool] = Field(default=None, description="Is text from IHOD?", alias="IsIHOD")
    governors_request: Optional[StrictBool] = Field(default=None, description="Is this at the Request of the Governor?", alias="GovernorsRequest")
    dls_prepared: StrictBool = Field(description="Is this text prepared by DLS?", alias="DLSPrepared")
    consent_required: Optional[StrictBool] = Field(default=None, description="Is consent required for this text?", alias="ConsentRequired")
    is_emergency: Optional[StrictBool] = Field(default=None, description="Is this text emergency ?", alias="IsEmergency")
    is_reprint: Optional[StrictBool] = Field(default=None, description="Is this text Reprint ?", alias="IsReprint")
    is_plural: Optional[StrictBool] = Field(default=None, description="does this contain multiple items e.g. amendments?", alias="IsPlural")
    on_reconvene: Optional[StrictBool] = Field(default=None, description="for a Reconvened session?", alias="OnReconvene")
    reference_ld_number: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="LIS Reference legislation Document Number (LDNummber)", alias="ReferenceLDNumber")
    text_disposition_id: Optional[StrictInt] = Field(default=None, description="unique identifier for Text Disposition (e.g. 1=Offered, 2=Recommended, 3=Reported, etc)", alias="TextDispositionID")
    text_disposition: Optional[StrictStr] = Field(default=None, description="Text Disposition (e.g. Offered, Recommended, Reported, etc)", alias="TextDisposition")
    reference_text_id: Optional[StrictInt] = Field(default=None, description="LIS Reference Text Id", alias="ReferenceTextID")
    committee_id: Optional[StrictInt] = Field(default=None, description="Committee unique identifier", alias="CommitteeID")
    committee_name: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="Committee Name", alias="CommitteeName")
    committee_number: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(default=None, description="Committee assigned number(Example: H01, S01 or 001)", alias="CommitteeNumber")
    pdf_file: Optional[List[PDFFile]] = Field(default=None, description="List of PDFFile", alias="PDFFile")
    html_file: Optional[List[HTMLFile]] = Field(default=None, description="list of HTMLFile", alias="HTMLFile")
    impact_file: Optional[List[ImpactFile]] = Field(default=None, description="List of ImpactFile", alias="ImpactFile")
    link_file: Optional[List[LinkFile]] = Field(default=None, description="List of LinkFile", alias="LinkFile")
    json_file: Optional[List[JSONFile]] = Field(default=None, description="List of JSONFile", alias="JSONFile")
    patrons: Optional[List[PatronBaseModel]] = Field(default=None, description="list of patrons", alias="Patrons")
    amendment_items: Optional[List[AmendmentItem]] = Field(default=None, alias="AmendmentItems")
    legislation_class_id: Optional[StrictInt] = Field(default=None, description=" LegislationClassID further identifies type of legislation beyond the standard Joint/Bill/Resolution defined with Legislation Type Code  1 Legislation  2 Memorial Resolution  3 Commending Resolution  4 Election of Judges  5 Budget", alias="LegislationClassID")
    legislation_class: Optional[StrictStr] = Field(default=None, description="LIS Legislation Description (e.g: memorial or commending resolution)", alias="LegislationClass")
    legislation_type: Optional[StrictStr] = Field(default=None, description="legislation type description e.g. \"Bill\"", alias="LegislationType")
    __properties: ClassVar[List[str]] = ["LegislationTextID", "LegislationDraftID", "TextFormat", "TextFormatID", "LegislationVersionID", "LegislationVersion", "LegislationID", "LegislationNumber", "ChamberCode", "LegislationChamberCode", "SessionCode", "LegislationTextActionID", "DocumentCode", "DraftText", "DraftTitle", "LDNumber", "VersionDate", "ReleaseToPrint", "VersionCode", "EventCode", "DocURL", "LinkURL", "Description", "Sponsor", "SponsorTypeID", "SessionYear", "IsPublic", "IsActive", "IsComplete", "IsIHOD", "GovernorsRequest", "DLSPrepared", "ConsentRequired", "IsEmergency", "IsReprint", "IsPlural", "OnReconvene", "ReferenceLDNumber", "TextDispositionID", "TextDisposition", "ReferenceTextID", "CommitteeID", "CommitteeName", "CommitteeNumber", "PDFFile", "HTMLFile", "ImpactFile", "LinkFile", "JSONFile", "Patrons", "AmendmentItems", "LegislationClassID", "LegislationClass", "LegislationType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LegislationTextGetResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in pdf_file (list)
        _items = []
        if self.pdf_file:
            for _item_pdf_file in self.pdf_file:
                if _item_pdf_file:
                    _items.append(_item_pdf_file.to_dict())
            _dict['PDFFile'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in html_file (list)
        _items = []
        if self.html_file:
            for _item_html_file in self.html_file:
                if _item_html_file:
                    _items.append(_item_html_file.to_dict())
            _dict['HTMLFile'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in impact_file (list)
        _items = []
        if self.impact_file:
            for _item_impact_file in self.impact_file:
                if _item_impact_file:
                    _items.append(_item_impact_file.to_dict())
            _dict['ImpactFile'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in link_file (list)
        _items = []
        if self.link_file:
            for _item_link_file in self.link_file:
                if _item_link_file:
                    _items.append(_item_link_file.to_dict())
            _dict['LinkFile'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in json_file (list)
        _items = []
        if self.json_file:
            for _item_json_file in self.json_file:
                if _item_json_file:
                    _items.append(_item_json_file.to_dict())
            _dict['JSONFile'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in patrons (list)
        _items = []
        if self.patrons:
            for _item_patrons in self.patrons:
                if _item_patrons:
                    _items.append(_item_patrons.to_dict())
            _dict['Patrons'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in amendment_items (list)
        _items = []
        if self.amendment_items:
            for _item_amendment_items in self.amendment_items:
                if _item_amendment_items:
                    _items.append(_item_amendment_items.to_dict())
            _dict['AmendmentItems'] = _items
        # set to None if legislation_text_id (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_text_id is None and "legislation_text_id" in self.model_fields_set:
            _dict['LegislationTextID'] = None

        # set to None if legislation_draft_id (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_draft_id is None and "legislation_draft_id" in self.model_fields_set:
            _dict['LegislationDraftID'] = None

        # set to None if text_format (nullable) is None
        # and model_fields_set contains the field
        if self.text_format is None and "text_format" in self.model_fields_set:
            _dict['TextFormat'] = None

        # set to None if text_format_id (nullable) is None
        # and model_fields_set contains the field
        if self.text_format_id is None and "text_format_id" in self.model_fields_set:
            _dict['TextFormatID'] = None

        # set to None if legislation_version_id (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_version_id is None and "legislation_version_id" in self.model_fields_set:
            _dict['LegislationVersionID'] = None

        # set to None if legislation_version (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_version is None and "legislation_version" in self.model_fields_set:
            _dict['LegislationVersion'] = None

        # set to None if legislation_id (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_id is None and "legislation_id" in self.model_fields_set:
            _dict['LegislationID'] = None

        # set to None if legislation_number (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_number is None and "legislation_number" in self.model_fields_set:
            _dict['LegislationNumber'] = None

        # set to None if chamber_code (nullable) is None
        # and model_fields_set contains the field
        if self.chamber_code is None and "chamber_code" in self.model_fields_set:
            _dict['ChamberCode'] = None

        # set to None if legislation_chamber_code (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_chamber_code is None and "legislation_chamber_code" in self.model_fields_set:
            _dict['LegislationChamberCode'] = None

        # set to None if session_code (nullable) is None
        # and model_fields_set contains the field
        if self.session_code is None and "session_code" in self.model_fields_set:
            _dict['SessionCode'] = None

        # set to None if legislation_text_action_id (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_text_action_id is None and "legislation_text_action_id" in self.model_fields_set:
            _dict['LegislationTextActionID'] = None

        # set to None if document_code (nullable) is None
        # and model_fields_set contains the field
        if self.document_code is None and "document_code" in self.model_fields_set:
            _dict['DocumentCode'] = None

        # set to None if draft_text (nullable) is None
        # and model_fields_set contains the field
        if self.draft_text is None and "draft_text" in self.model_fields_set:
            _dict['DraftText'] = None

        # set to None if draft_title (nullable) is None
        # and model_fields_set contains the field
        if self.draft_title is None and "draft_title" in self.model_fields_set:
            _dict['DraftTitle'] = None

        # set to None if ld_number (nullable) is None
        # and model_fields_set contains the field
        if self.ld_number is None and "ld_number" in self.model_fields_set:
            _dict['LDNumber'] = None

        # set to None if version_date (nullable) is None
        # and model_fields_set contains the field
        if self.version_date is None and "version_date" in self.model_fields_set:
            _dict['VersionDate'] = None

        # set to None if release_to_print (nullable) is None
        # and model_fields_set contains the field
        if self.release_to_print is None and "release_to_print" in self.model_fields_set:
            _dict['ReleaseToPrint'] = None

        # set to None if version_code (nullable) is None
        # and model_fields_set contains the field
        if self.version_code is None and "version_code" in self.model_fields_set:
            _dict['VersionCode'] = None

        # set to None if event_code (nullable) is None
        # and model_fields_set contains the field
        if self.event_code is None and "event_code" in self.model_fields_set:
            _dict['EventCode'] = None

        # set to None if doc_url (nullable) is None
        # and model_fields_set contains the field
        if self.doc_url is None and "doc_url" in self.model_fields_set:
            _dict['DocURL'] = None

        # set to None if link_url (nullable) is None
        # and model_fields_set contains the field
        if self.link_url is None and "link_url" in self.model_fields_set:
            _dict['LinkURL'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['Description'] = None

        # set to None if sponsor (nullable) is None
        # and model_fields_set contains the field
        if self.sponsor is None and "sponsor" in self.model_fields_set:
            _dict['Sponsor'] = None

        # set to None if sponsor_type_id (nullable) is None
        # and model_fields_set contains the field
        if self.sponsor_type_id is None and "sponsor_type_id" in self.model_fields_set:
            _dict['SponsorTypeID'] = None

        # set to None if is_complete (nullable) is None
        # and model_fields_set contains the field
        if self.is_complete is None and "is_complete" in self.model_fields_set:
            _dict['IsComplete'] = None

        # set to None if is_ihod (nullable) is None
        # and model_fields_set contains the field
        if self.is_ihod is None and "is_ihod" in self.model_fields_set:
            _dict['IsIHOD'] = None

        # set to None if governors_request (nullable) is None
        # and model_fields_set contains the field
        if self.governors_request is None and "governors_request" in self.model_fields_set:
            _dict['GovernorsRequest'] = None

        # set to None if on_reconvene (nullable) is None
        # and model_fields_set contains the field
        if self.on_reconvene is None and "on_reconvene" in self.model_fields_set:
            _dict['OnReconvene'] = None

        # set to None if reference_ld_number (nullable) is None
        # and model_fields_set contains the field
        if self.reference_ld_number is None and "reference_ld_number" in self.model_fields_set:
            _dict['ReferenceLDNumber'] = None

        # set to None if text_disposition_id (nullable) is None
        # and model_fields_set contains the field
        if self.text_disposition_id is None and "text_disposition_id" in self.model_fields_set:
            _dict['TextDispositionID'] = None

        # set to None if text_disposition (nullable) is None
        # and model_fields_set contains the field
        if self.text_disposition is None and "text_disposition" in self.model_fields_set:
            _dict['TextDisposition'] = None

        # set to None if reference_text_id (nullable) is None
        # and model_fields_set contains the field
        if self.reference_text_id is None and "reference_text_id" in self.model_fields_set:
            _dict['ReferenceTextID'] = None

        # set to None if committee_id (nullable) is None
        # and model_fields_set contains the field
        if self.committee_id is None and "committee_id" in self.model_fields_set:
            _dict['CommitteeID'] = None

        # set to None if committee_name (nullable) is None
        # and model_fields_set contains the field
        if self.committee_name is None and "committee_name" in self.model_fields_set:
            _dict['CommitteeName'] = None

        # set to None if committee_number (nullable) is None
        # and model_fields_set contains the field
        if self.committee_number is None and "committee_number" in self.model_fields_set:
            _dict['CommitteeNumber'] = None

        # set to None if pdf_file (nullable) is None
        # and model_fields_set contains the field
        if self.pdf_file is None and "pdf_file" in self.model_fields_set:
            _dict['PDFFile'] = None

        # set to None if html_file (nullable) is None
        # and model_fields_set contains the field
        if self.html_file is None and "html_file" in self.model_fields_set:
            _dict['HTMLFile'] = None

        # set to None if impact_file (nullable) is None
        # and model_fields_set contains the field
        if self.impact_file is None and "impact_file" in self.model_fields_set:
            _dict['ImpactFile'] = None

        # set to None if link_file (nullable) is None
        # and model_fields_set contains the field
        if self.link_file is None and "link_file" in self.model_fields_set:
            _dict['LinkFile'] = None

        # set to None if json_file (nullable) is None
        # and model_fields_set contains the field
        if self.json_file is None and "json_file" in self.model_fields_set:
            _dict['JSONFile'] = None

        # set to None if patrons (nullable) is None
        # and model_fields_set contains the field
        if self.patrons is None and "patrons" in self.model_fields_set:
            _dict['Patrons'] = None

        # set to None if amendment_items (nullable) is None
        # and model_fields_set contains the field
        if self.amendment_items is None and "amendment_items" in self.model_fields_set:
            _dict['AmendmentItems'] = None

        # set to None if legislation_class_id (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_class_id is None and "legislation_class_id" in self.model_fields_set:
            _dict['LegislationClassID'] = None

        # set to None if legislation_class (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_class is None and "legislation_class" in self.model_fields_set:
            _dict['LegislationClass'] = None

        # set to None if legislation_type (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_type is None and "legislation_type" in self.model_fields_set:
            _dict['LegislationType'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LegislationTextGetResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "LegislationTextID": obj.get("LegislationTextID"),
            "LegislationDraftID": obj.get("LegislationDraftID"),
            "TextFormat": obj.get("TextFormat"),
            "TextFormatID": obj.get("TextFormatID"),
            "LegislationVersionID": obj.get("LegislationVersionID"),
            "LegislationVersion": obj.get("LegislationVersion"),
            "LegislationID": obj.get("LegislationID"),
            "LegislationNumber": obj.get("LegislationNumber"),
            "ChamberCode": obj.get("ChamberCode"),
            "LegislationChamberCode": obj.get("LegislationChamberCode"),
            "SessionCode": obj.get("SessionCode"),
            "LegislationTextActionID": obj.get("LegislationTextActionID"),
            "DocumentCode": obj.get("DocumentCode"),
            "DraftText": obj.get("DraftText"),
            "DraftTitle": obj.get("DraftTitle"),
            "LDNumber": obj.get("LDNumber"),
            "VersionDate": obj.get("VersionDate"),
            "ReleaseToPrint": obj.get("ReleaseToPrint"),
            "VersionCode": obj.get("VersionCode"),
            "EventCode": obj.get("EventCode"),
            "DocURL": obj.get("DocURL"),
            "LinkURL": obj.get("LinkURL"),
            "Description": obj.get("Description"),
            "Sponsor": obj.get("Sponsor"),
            "SponsorTypeID": obj.get("SponsorTypeID"),
            "SessionYear": obj.get("SessionYear"),
            "IsPublic": obj.get("IsPublic"),
            "IsActive": obj.get("IsActive"),
            "IsComplete": obj.get("IsComplete"),
            "IsIHOD": obj.get("IsIHOD"),
            "GovernorsRequest": obj.get("GovernorsRequest"),
            "DLSPrepared": obj.get("DLSPrepared"),
            "ConsentRequired": obj.get("ConsentRequired"),
            "IsEmergency": obj.get("IsEmergency"),
            "IsReprint": obj.get("IsReprint"),
            "IsPlural": obj.get("IsPlural"),
            "OnReconvene": obj.get("OnReconvene"),
            "ReferenceLDNumber": obj.get("ReferenceLDNumber"),
            "TextDispositionID": obj.get("TextDispositionID"),
            "TextDisposition": obj.get("TextDisposition"),
            "ReferenceTextID": obj.get("ReferenceTextID"),
            "CommitteeID": obj.get("CommitteeID"),
            "CommitteeName": obj.get("CommitteeName"),
            "CommitteeNumber": obj.get("CommitteeNumber"),
            "PDFFile": [PDFFile.from_dict(_item) for _item in obj["PDFFile"]] if obj.get("PDFFile") is not None else None,
            "HTMLFile": [HTMLFile.from_dict(_item) for _item in obj["HTMLFile"]] if obj.get("HTMLFile") is not None else None,
            "ImpactFile": [ImpactFile.from_dict(_item) for _item in obj["ImpactFile"]] if obj.get("ImpactFile") is not None else None,
            "LinkFile": [LinkFile.from_dict(_item) for _item in obj["LinkFile"]] if obj.get("LinkFile") is not None else None,
            "JSONFile": [JSONFile.from_dict(_item) for _item in obj["JSONFile"]] if obj.get("JSONFile") is not None else None,
            "Patrons": [PatronBaseModel.from_dict(_item) for _item in obj["Patrons"]] if obj.get("Patrons") is not None else None,
            "AmendmentItems": [AmendmentItem.from_dict(_item) for _item in obj["AmendmentItems"]] if obj.get("AmendmentItems") is not None else None,
            "LegislationClassID": obj.get("LegislationClassID"),
            "LegislationClass": obj.get("LegislationClass"),
            "LegislationType": obj.get("LegislationType")
        })
        return _obj


