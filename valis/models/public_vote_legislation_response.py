# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from valis.models.vote_item_response import VoteItemResponse
from typing import Optional, Set
from typing_extensions import Self

class PublicVoteLegislationResponse(BaseModel):
    """
    Information for a Public Vote Legislation
    """ # noqa: E501
    vote_legislation_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Vote Legislation", alias="VoteLegislationID")
    legislation_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Legislation", alias="LegislationID")
    legislation_number: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(default=None, description="Legislation number", alias="LegislationNumber")
    description: Optional[Annotated[str, Field(strict=True, max_length=1000)]] = Field(default=None, description="Vote description", alias="Description")
    vote_number: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="Vote number", alias="VoteNumber")
    minutes_entry_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Minutes Entry", alias="MinutesEntryID")
    vote_items: Optional[List[VoteItemResponse]] = Field(default=None, description="List of Vote Items", alias="VoteItems")
    __properties: ClassVar[List[str]] = ["VoteLegislationID", "LegislationID", "LegislationNumber", "Description", "VoteNumber", "MinutesEntryID", "VoteItems"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicVoteLegislationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in vote_items (list)
        _items = []
        if self.vote_items:
            for _item_vote_items in self.vote_items:
                if _item_vote_items:
                    _items.append(_item_vote_items.to_dict())
            _dict['VoteItems'] = _items
        # set to None if vote_legislation_id (nullable) is None
        # and model_fields_set contains the field
        if self.vote_legislation_id is None and "vote_legislation_id" in self.model_fields_set:
            _dict['VoteLegislationID'] = None

        # set to None if legislation_id (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_id is None and "legislation_id" in self.model_fields_set:
            _dict['LegislationID'] = None

        # set to None if legislation_number (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_number is None and "legislation_number" in self.model_fields_set:
            _dict['LegislationNumber'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['Description'] = None

        # set to None if vote_number (nullable) is None
        # and model_fields_set contains the field
        if self.vote_number is None and "vote_number" in self.model_fields_set:
            _dict['VoteNumber'] = None

        # set to None if minutes_entry_id (nullable) is None
        # and model_fields_set contains the field
        if self.minutes_entry_id is None and "minutes_entry_id" in self.model_fields_set:
            _dict['MinutesEntryID'] = None

        # set to None if vote_items (nullable) is None
        # and model_fields_set contains the field
        if self.vote_items is None and "vote_items" in self.model_fields_set:
            _dict['VoteItems'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicVoteLegislationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "VoteLegislationID": obj.get("VoteLegislationID"),
            "LegislationID": obj.get("LegislationID"),
            "LegislationNumber": obj.get("LegislationNumber"),
            "Description": obj.get("Description"),
            "VoteNumber": obj.get("VoteNumber"),
            "MinutesEntryID": obj.get("MinutesEntryID"),
            "VoteItems": [VoteItemResponse.from_dict(_item) for _item in obj["VoteItems"]] if obj.get("VoteItems") is not None else None
        })
        return _obj


