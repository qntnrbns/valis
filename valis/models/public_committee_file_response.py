# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PublicCommitteeFileResponse(BaseModel):
    """
    Information for Public Committee File
    """ # noqa: E501
    committee_id: Optional[StrictInt] = Field(default=None, description="Unique Identifier for Committee", alias="CommitteeID")
    file_url: Optional[StrictStr] = Field(default=None, description="File URL", alias="FileURL")
    text_format_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Text Format", alias="TextFormatID")
    is_generated: Optional[StrictBool] = Field(default=None, description="Is this generated?", alias="IsGenerated")
    is_public: Optional[StrictBool] = Field(default=None, description="is this public?", alias="IsPublic")
    is_active: Optional[StrictBool] = Field(default=None, description="is this active?", alias="IsActive")
    description: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="Link description", alias="Description")
    committee_file_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Committee File", alias="CommitteeFileID")
    __properties: ClassVar[List[str]] = ["CommitteeID", "FileURL", "TextFormatID", "IsGenerated", "IsPublic", "IsActive", "Description", "CommitteeFileID"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicCommitteeFileResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if committee_id (nullable) is None
        # and model_fields_set contains the field
        if self.committee_id is None and "committee_id" in self.model_fields_set:
            _dict['CommitteeID'] = None

        # set to None if file_url (nullable) is None
        # and model_fields_set contains the field
        if self.file_url is None and "file_url" in self.model_fields_set:
            _dict['FileURL'] = None

        # set to None if text_format_id (nullable) is None
        # and model_fields_set contains the field
        if self.text_format_id is None and "text_format_id" in self.model_fields_set:
            _dict['TextFormatID'] = None

        # set to None if is_generated (nullable) is None
        # and model_fields_set contains the field
        if self.is_generated is None and "is_generated" in self.model_fields_set:
            _dict['IsGenerated'] = None

        # set to None if is_public (nullable) is None
        # and model_fields_set contains the field
        if self.is_public is None and "is_public" in self.model_fields_set:
            _dict['IsPublic'] = None

        # set to None if is_active (nullable) is None
        # and model_fields_set contains the field
        if self.is_active is None and "is_active" in self.model_fields_set:
            _dict['IsActive'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['Description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicCommitteeFileResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CommitteeID": obj.get("CommitteeID"),
            "FileURL": obj.get("FileURL"),
            "TextFormatID": obj.get("TextFormatID"),
            "IsGenerated": obj.get("IsGenerated"),
            "IsPublic": obj.get("IsPublic"),
            "IsActive": obj.get("IsActive"),
            "Description": obj.get("Description"),
            "CommitteeFileID": obj.get("CommitteeFileID")
        })
        return _obj


