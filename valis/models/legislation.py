# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Legislation(BaseModel):
    """
    Legislation Patron Response that uses the Legislation Base Model in the DAL
    """ # noqa: E501
    session_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Session", alias="SessionID")
    session_code: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(default=None, description="Session code (e.g. 20181)", alias="SessionCode")
    legislation_class_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Legislation Class", alias="LegislationClassID")
    legislation_number: Optional[StrictStr] = Field(default=None, description="Legislation number", alias="LegislationNumber")
    description: Optional[StrictStr] = Field(default=None, description="Legislation Description/Catchline", alias="Description")
    legislation_title: Optional[StrictStr] = Field(default=None, alias="LegislationTitle")
    offered_date: Optional[datetime] = Field(default=None, description="Legislation Offered date", alias="OfferedDate")
    introduction_date: Optional[datetime] = Field(default=None, description="Legislation Introduction date", alias="IntroductionDate")
    chamber_code: Optional[StrictStr] = Field(default=None, description="Chamber code (H/S)", alias="ChamberCode")
    legislation_type_code: Optional[StrictStr] = Field(default=None, description="Legislation Type Code description", alias="LegislationTypeCode")
    full_number: Optional[StrictStr] = Field(default=None, description="Full Number of the bill", alias="FullNumber")
    legislation_status_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Legislative Status", alias="LegislationStatusID")
    legislation_class: Optional[StrictStr] = Field(default=None, description="Legislation LegislationClass (identified by ID above)", alias="LegislationClass")
    legislation_id: Optional[StrictInt] = Field(default=None, description="Legislation ID", alias="LegislationID")
    legislation_key: Optional[StrictInt] = Field(default=None, description="Legislation Key", alias="LegislationKey")
    legislation_status: Optional[StrictStr] = Field(default=None, description="Legislation Status", alias="LegislationStatus")
    effective_type: Optional[StrictStr] = Field(default=None, description="Effective Type", alias="EffectiveType")
    session_name: Optional[StrictStr] = Field(default=None, description="Session Name", alias="SessionName")
    is_prefile: Optional[StrictBool] = Field(default=None, description="IsPrefile", alias="IsPrefile")
    __properties: ClassVar[List[str]] = ["SessionID", "SessionCode", "LegislationClassID", "LegislationNumber", "Description", "LegislationTitle", "OfferedDate", "IntroductionDate", "ChamberCode", "LegislationTypeCode", "FullNumber", "LegislationStatusID", "LegislationClass", "LegislationID", "LegislationKey", "LegislationStatus", "EffectiveType", "SessionName", "IsPrefile"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Legislation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if session_id (nullable) is None
        # and model_fields_set contains the field
        if self.session_id is None and "session_id" in self.model_fields_set:
            _dict['SessionID'] = None

        # set to None if session_code (nullable) is None
        # and model_fields_set contains the field
        if self.session_code is None and "session_code" in self.model_fields_set:
            _dict['SessionCode'] = None

        # set to None if legislation_class_id (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_class_id is None and "legislation_class_id" in self.model_fields_set:
            _dict['LegislationClassID'] = None

        # set to None if legislation_number (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_number is None and "legislation_number" in self.model_fields_set:
            _dict['LegislationNumber'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['Description'] = None

        # set to None if legislation_title (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_title is None and "legislation_title" in self.model_fields_set:
            _dict['LegislationTitle'] = None

        # set to None if offered_date (nullable) is None
        # and model_fields_set contains the field
        if self.offered_date is None and "offered_date" in self.model_fields_set:
            _dict['OfferedDate'] = None

        # set to None if introduction_date (nullable) is None
        # and model_fields_set contains the field
        if self.introduction_date is None and "introduction_date" in self.model_fields_set:
            _dict['IntroductionDate'] = None

        # set to None if chamber_code (nullable) is None
        # and model_fields_set contains the field
        if self.chamber_code is None and "chamber_code" in self.model_fields_set:
            _dict['ChamberCode'] = None

        # set to None if legislation_type_code (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_type_code is None and "legislation_type_code" in self.model_fields_set:
            _dict['LegislationTypeCode'] = None

        # set to None if full_number (nullable) is None
        # and model_fields_set contains the field
        if self.full_number is None and "full_number" in self.model_fields_set:
            _dict['FullNumber'] = None

        # set to None if legislation_status_id (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_status_id is None and "legislation_status_id" in self.model_fields_set:
            _dict['LegislationStatusID'] = None

        # set to None if legislation_class (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_class is None and "legislation_class" in self.model_fields_set:
            _dict['LegislationClass'] = None

        # set to None if legislation_id (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_id is None and "legislation_id" in self.model_fields_set:
            _dict['LegislationID'] = None

        # set to None if legislation_key (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_key is None and "legislation_key" in self.model_fields_set:
            _dict['LegislationKey'] = None

        # set to None if legislation_status (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_status is None and "legislation_status" in self.model_fields_set:
            _dict['LegislationStatus'] = None

        # set to None if effective_type (nullable) is None
        # and model_fields_set contains the field
        if self.effective_type is None and "effective_type" in self.model_fields_set:
            _dict['EffectiveType'] = None

        # set to None if session_name (nullable) is None
        # and model_fields_set contains the field
        if self.session_name is None and "session_name" in self.model_fields_set:
            _dict['SessionName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Legislation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "SessionID": obj.get("SessionID"),
            "SessionCode": obj.get("SessionCode"),
            "LegislationClassID": obj.get("LegislationClassID"),
            "LegislationNumber": obj.get("LegislationNumber"),
            "Description": obj.get("Description"),
            "LegislationTitle": obj.get("LegislationTitle"),
            "OfferedDate": obj.get("OfferedDate"),
            "IntroductionDate": obj.get("IntroductionDate"),
            "ChamberCode": obj.get("ChamberCode"),
            "LegislationTypeCode": obj.get("LegislationTypeCode"),
            "FullNumber": obj.get("FullNumber"),
            "LegislationStatusID": obj.get("LegislationStatusID"),
            "LegislationClass": obj.get("LegislationClass"),
            "LegislationID": obj.get("LegislationID"),
            "LegislationKey": obj.get("LegislationKey"),
            "LegislationStatus": obj.get("LegislationStatus"),
            "EffectiveType": obj.get("EffectiveType"),
            "SessionName": obj.get("SessionName"),
            "IsPrefile": obj.get("IsPrefile")
        })
        return _obj


