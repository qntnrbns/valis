# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from valis.models.vote_member_public_get_response import VoteMemberPublicGetResponse
from typing import Optional, Set
from typing_extensions import Self

class AgendaItemPublicGetResponse(BaseModel):
    """
    Public Agenda Item response
    """ # noqa: E501
    agenda_id: Optional[StrictInt] = Field(default=None, description="Agenda ID", alias="AgendaId")
    description: Optional[Annotated[str, Field(strict=True, max_length=8000)]] = Field(default=None, description="Agenda Item Description", alias="Description")
    calendar_description: Optional[Annotated[str, Field(strict=True, max_length=8000)]] = Field(default=None, description="Agenda Item Calendar Description (will be set with HTML formatting)", alias="CalendarDescription")
    ld_title: Optional[Annotated[str, Field(strict=True, max_length=8000)]] = Field(default=None, description="LD Draft Title", alias="LDTitle")
    legislation_text_id: Optional[StrictInt] = Field(default=None, description="Calendar Category Sequence", alias="LegislationTextId")
    ld_number: Optional[StrictStr] = Field(default=None, description="Legislation Draft (LD)Number of the Amemdments", alias="LDNumber")
    draft_text: Optional[StrictStr] = Field(default=None, description="Legislation Draft Text", alias="DraftText")
    vote_id: Optional[StrictInt] = Field(default=None, description="Vote unique Identifier", alias="VoteID")
    is_active: Optional[StrictBool] = Field(default=None, description="is Agenda Item active", alias="IsActive")
    sequence: Optional[StrictInt] = Field(default=None, description="Sequence", alias="Sequence")
    legislation_event_id: Optional[StrictInt] = Field(default=None, description="unique identifier for legislation event", alias="LegislationEventID")
    agenda_item_id: Optional[StrictInt] = Field(default=None, description="Agenda Item ID", alias="AgendaItemId")
    vote_member: Optional[List[VoteMemberPublicGetResponse]] = Field(default=None, description="list of Vote Members for Agenda Item", alias="VoteMember")
    __properties: ClassVar[List[str]] = ["AgendaId", "Description", "CalendarDescription", "LDTitle", "LegislationTextId", "LDNumber", "DraftText", "VoteID", "IsActive", "Sequence", "LegislationEventID", "AgendaItemId", "VoteMember"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgendaItemPublicGetResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in vote_member (list)
        _items = []
        if self.vote_member:
            for _item_vote_member in self.vote_member:
                if _item_vote_member:
                    _items.append(_item_vote_member.to_dict())
            _dict['VoteMember'] = _items
        # set to None if agenda_id (nullable) is None
        # and model_fields_set contains the field
        if self.agenda_id is None and "agenda_id" in self.model_fields_set:
            _dict['AgendaId'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['Description'] = None

        # set to None if calendar_description (nullable) is None
        # and model_fields_set contains the field
        if self.calendar_description is None and "calendar_description" in self.model_fields_set:
            _dict['CalendarDescription'] = None

        # set to None if ld_title (nullable) is None
        # and model_fields_set contains the field
        if self.ld_title is None and "ld_title" in self.model_fields_set:
            _dict['LDTitle'] = None

        # set to None if legislation_text_id (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_text_id is None and "legislation_text_id" in self.model_fields_set:
            _dict['LegislationTextId'] = None

        # set to None if ld_number (nullable) is None
        # and model_fields_set contains the field
        if self.ld_number is None and "ld_number" in self.model_fields_set:
            _dict['LDNumber'] = None

        # set to None if draft_text (nullable) is None
        # and model_fields_set contains the field
        if self.draft_text is None and "draft_text" in self.model_fields_set:
            _dict['DraftText'] = None

        # set to None if vote_id (nullable) is None
        # and model_fields_set contains the field
        if self.vote_id is None and "vote_id" in self.model_fields_set:
            _dict['VoteID'] = None

        # set to None if is_active (nullable) is None
        # and model_fields_set contains the field
        if self.is_active is None and "is_active" in self.model_fields_set:
            _dict['IsActive'] = None

        # set to None if sequence (nullable) is None
        # and model_fields_set contains the field
        if self.sequence is None and "sequence" in self.model_fields_set:
            _dict['Sequence'] = None

        # set to None if legislation_event_id (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_event_id is None and "legislation_event_id" in self.model_fields_set:
            _dict['LegislationEventID'] = None

        # set to None if agenda_item_id (nullable) is None
        # and model_fields_set contains the field
        if self.agenda_item_id is None and "agenda_item_id" in self.model_fields_set:
            _dict['AgendaItemId'] = None

        # set to None if vote_member (nullable) is None
        # and model_fields_set contains the field
        if self.vote_member is None and "vote_member" in self.model_fields_set:
            _dict['VoteMember'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgendaItemPublicGetResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AgendaId": obj.get("AgendaId"),
            "Description": obj.get("Description"),
            "CalendarDescription": obj.get("CalendarDescription"),
            "LDTitle": obj.get("LDTitle"),
            "LegislationTextId": obj.get("LegislationTextId"),
            "LDNumber": obj.get("LDNumber"),
            "DraftText": obj.get("DraftText"),
            "VoteID": obj.get("VoteID"),
            "IsActive": obj.get("IsActive"),
            "Sequence": obj.get("Sequence"),
            "LegislationEventID": obj.get("LegislationEventID"),
            "AgendaItemId": obj.get("AgendaItemId"),
            "VoteMember": [VoteMemberPublicGetResponse.from_dict(_item) for _item in obj["VoteMember"]] if obj.get("VoteMember") is not None else None
        })
        return _obj


