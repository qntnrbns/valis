# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from valis.models.calendar_action_reference_response import CalendarActionReferenceResponse
from typing import Optional, Set
from typing_extensions import Self

class LegislationEventTypeReferenceResponse(BaseModel):
    """
    Response object containing LIS Legislation events reference information.  Note: For Internal Use Only
    """ # noqa: E501
    legislation_event_type_id: Optional[StrictInt] = Field(default=None, description="Legislation Event Type unique identifier", alias="LegislationEventTypeID")
    event_code: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(default=None, description="Event Code", alias="EventCode")
    legislation_description: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, description="Description for Legislation usage", alias="LegislationDescription")
    committee_description: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, description="Description for Committee usage", alias="CommitteeDescription")
    calendar_description: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, description="Description for Calendar usage", alias="CalendarDescription")
    journal_description: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, description="Description for Journal usage", alias="JournalDescription")
    vote_description: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, description="Description for Vote usage", alias="VoteDescription")
    legislation_chamber_code: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=1)]] = Field(default=None, description="Legislation Chamber Code", alias="LegislationChamberCode")
    actor_type_id: Optional[StrictInt] = Field(default=None, description="Actor Type Identifier", alias="ActorTypeID")
    is_public: Optional[StrictBool] = Field(default=None, description="Is Public Event Type", alias="IsPublic")
    is_active: Optional[StrictBool] = Field(default=None, description="Is Active Event Type", alias="IsActive")
    committee_complete: Optional[StrictBool] = Field(default=None, description="Is Committee Complete", alias="CommitteeComplete")
    is_passed: Optional[StrictBool] = Field(default=None, description="Has Event Passed?", alias="IsPassed")
    action_references: Optional[List[CalendarActionReferenceResponse]] = Field(default=None, description="optional list of Action References", alias="ActionReferences")
    __properties: ClassVar[List[str]] = ["LegislationEventTypeID", "EventCode", "LegislationDescription", "CommitteeDescription", "CalendarDescription", "JournalDescription", "VoteDescription", "LegislationChamberCode", "ActorTypeID", "IsPublic", "IsActive", "CommitteeComplete", "IsPassed", "ActionReferences"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LegislationEventTypeReferenceResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in action_references (list)
        _items = []
        if self.action_references:
            for _item_action_references in self.action_references:
                if _item_action_references:
                    _items.append(_item_action_references.to_dict())
            _dict['ActionReferences'] = _items
        # set to None if legislation_event_type_id (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_event_type_id is None and "legislation_event_type_id" in self.model_fields_set:
            _dict['LegislationEventTypeID'] = None

        # set to None if event_code (nullable) is None
        # and model_fields_set contains the field
        if self.event_code is None and "event_code" in self.model_fields_set:
            _dict['EventCode'] = None

        # set to None if legislation_description (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_description is None and "legislation_description" in self.model_fields_set:
            _dict['LegislationDescription'] = None

        # set to None if committee_description (nullable) is None
        # and model_fields_set contains the field
        if self.committee_description is None and "committee_description" in self.model_fields_set:
            _dict['CommitteeDescription'] = None

        # set to None if calendar_description (nullable) is None
        # and model_fields_set contains the field
        if self.calendar_description is None and "calendar_description" in self.model_fields_set:
            _dict['CalendarDescription'] = None

        # set to None if journal_description (nullable) is None
        # and model_fields_set contains the field
        if self.journal_description is None and "journal_description" in self.model_fields_set:
            _dict['JournalDescription'] = None

        # set to None if vote_description (nullable) is None
        # and model_fields_set contains the field
        if self.vote_description is None and "vote_description" in self.model_fields_set:
            _dict['VoteDescription'] = None

        # set to None if legislation_chamber_code (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_chamber_code is None and "legislation_chamber_code" in self.model_fields_set:
            _dict['LegislationChamberCode'] = None

        # set to None if is_passed (nullable) is None
        # and model_fields_set contains the field
        if self.is_passed is None and "is_passed" in self.model_fields_set:
            _dict['IsPassed'] = None

        # set to None if action_references (nullable) is None
        # and model_fields_set contains the field
        if self.action_references is None and "action_references" in self.model_fields_set:
            _dict['ActionReferences'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LegislationEventTypeReferenceResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "LegislationEventTypeID": obj.get("LegislationEventTypeID"),
            "EventCode": obj.get("EventCode"),
            "LegislationDescription": obj.get("LegislationDescription"),
            "CommitteeDescription": obj.get("CommitteeDescription"),
            "CalendarDescription": obj.get("CalendarDescription"),
            "JournalDescription": obj.get("JournalDescription"),
            "VoteDescription": obj.get("VoteDescription"),
            "LegislationChamberCode": obj.get("LegislationChamberCode"),
            "ActorTypeID": obj.get("ActorTypeID"),
            "IsPublic": obj.get("IsPublic"),
            "IsActive": obj.get("IsActive"),
            "CommitteeComplete": obj.get("CommitteeComplete"),
            "IsPassed": obj.get("IsPassed"),
            "ActionReferences": [CalendarActionReferenceResponse.from_dict(_item) for _item in obj["ActionReferences"]] if obj.get("ActionReferences") is not None else None
        })
        return _obj


