# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from valis.models.public_get_communication_legislation_response import PublicGetCommunicationLegislationResponse
from typing import Optional, Set
from typing_extensions import Self

class PublicGetCommunicationCategoryResponse(BaseModel):
    """
    Information for Public Communication Category
    """ # noqa: E501
    communication_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Communication", alias="CommunicationID")
    communication_category_type_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Communication Category Type", alias="CommunicationCategoryTypeID")
    category_code: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(default=None, description="Category code", alias="CategoryCode")
    category_description: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, description="Category description", alias="CategoryDescription")
    minutes_summary: Optional[StrictStr] = Field(default=None, description="Minutes Summary (built from Legislation Communications)", alias="MinutesSummary")
    sequence: Optional[StrictInt] = Field(default=None, description="Sequence", alias="Sequence")
    plural_description: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, description="Plural Communication description", alias="PluralDescription")
    description: Optional[Annotated[str, Field(strict=True, max_length=2500)]] = Field(default=None, description="Description", alias="Description")
    communication_category_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Communication Category", alias="CommunicationCategoryID")
    communication_legislation: Optional[List[PublicGetCommunicationLegislationResponse]] = Field(default=None, description="List of Communication Legislation", alias="CommunicationLegislation")
    __properties: ClassVar[List[str]] = ["CommunicationID", "CommunicationCategoryTypeID", "CategoryCode", "CategoryDescription", "MinutesSummary", "Sequence", "PluralDescription", "Description", "CommunicationCategoryID", "CommunicationLegislation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicGetCommunicationCategoryResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in communication_legislation (list)
        _items = []
        if self.communication_legislation:
            for _item_communication_legislation in self.communication_legislation:
                if _item_communication_legislation:
                    _items.append(_item_communication_legislation.to_dict())
            _dict['CommunicationLegislation'] = _items
        # set to None if communication_id (nullable) is None
        # and model_fields_set contains the field
        if self.communication_id is None and "communication_id" in self.model_fields_set:
            _dict['CommunicationID'] = None

        # set to None if communication_category_type_id (nullable) is None
        # and model_fields_set contains the field
        if self.communication_category_type_id is None and "communication_category_type_id" in self.model_fields_set:
            _dict['CommunicationCategoryTypeID'] = None

        # set to None if category_code (nullable) is None
        # and model_fields_set contains the field
        if self.category_code is None and "category_code" in self.model_fields_set:
            _dict['CategoryCode'] = None

        # set to None if category_description (nullable) is None
        # and model_fields_set contains the field
        if self.category_description is None and "category_description" in self.model_fields_set:
            _dict['CategoryDescription'] = None

        # set to None if minutes_summary (nullable) is None
        # and model_fields_set contains the field
        if self.minutes_summary is None and "minutes_summary" in self.model_fields_set:
            _dict['MinutesSummary'] = None

        # set to None if sequence (nullable) is None
        # and model_fields_set contains the field
        if self.sequence is None and "sequence" in self.model_fields_set:
            _dict['Sequence'] = None

        # set to None if plural_description (nullable) is None
        # and model_fields_set contains the field
        if self.plural_description is None and "plural_description" in self.model_fields_set:
            _dict['PluralDescription'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['Description'] = None

        # set to None if communication_category_id (nullable) is None
        # and model_fields_set contains the field
        if self.communication_category_id is None and "communication_category_id" in self.model_fields_set:
            _dict['CommunicationCategoryID'] = None

        # set to None if communication_legislation (nullable) is None
        # and model_fields_set contains the field
        if self.communication_legislation is None and "communication_legislation" in self.model_fields_set:
            _dict['CommunicationLegislation'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicGetCommunicationCategoryResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CommunicationID": obj.get("CommunicationID"),
            "CommunicationCategoryTypeID": obj.get("CommunicationCategoryTypeID"),
            "CategoryCode": obj.get("CategoryCode"),
            "CategoryDescription": obj.get("CategoryDescription"),
            "MinutesSummary": obj.get("MinutesSummary"),
            "Sequence": obj.get("Sequence"),
            "PluralDescription": obj.get("PluralDescription"),
            "Description": obj.get("Description"),
            "CommunicationCategoryID": obj.get("CommunicationCategoryID"),
            "CommunicationLegislation": [PublicGetCommunicationLegislationResponse.from_dict(_item) for _item in obj["CommunicationLegislation"]] if obj.get("CommunicationLegislation") is not None else None
        })
        return _obj


