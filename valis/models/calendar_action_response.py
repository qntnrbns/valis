# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from valis.models.calendar_action_reference_response import CalendarActionReferenceResponse
from typing import Optional, Set
from typing_extensions import Self

class CalendarActionResponse(BaseModel):
    """
    Calendar Action Reference Response
    """ # noqa: E501
    calendar_action_id: StrictInt = Field(description="Calendar Action unique identifier", alias="CalendarActionID")
    vote_description: StrictStr = Field(description="Vote Description", alias="VoteDescription")
    description: StrictStr = Field(description="Calendar Action Description", alias="Description")
    event_code: Optional[StrictStr] = Field(default=None, description="Corresponding Event Code", alias="EventCode")
    chamber_code: Optional[StrictStr] = Field(default=None, description="Chamber Code", alias="ChamberCode")
    category_code: Optional[StrictStr] = Field(default=None, description="Category Code", alias="CategoryCode")
    calendar_category_type_id: Optional[StrictInt] = Field(default=None, description="Calendar Category Type ID", alias="CalendarCategoryTypeID")
    legislation_chamber_code: Optional[StrictStr] = Field(default=None, description="Legislation Chamber Code", alias="LegislationChamberCode")
    is_passed: Optional[StrictBool] = Field(default=None, description="Has Action Passed?", alias="IsPassed")
    in_preview: Optional[StrictBool] = Field(default=None, description="If not set, will not show for preview/generation purposes", alias="InPreview")
    action_references: Optional[List[CalendarActionReferenceResponse]] = Field(default=None, description="optional list of Action References", alias="ActionReferences")
    __properties: ClassVar[List[str]] = ["CalendarActionID", "VoteDescription", "Description", "EventCode", "ChamberCode", "CategoryCode", "CalendarCategoryTypeID", "LegislationChamberCode", "IsPassed", "InPreview", "ActionReferences"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CalendarActionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in action_references (list)
        _items = []
        if self.action_references:
            for _item_action_references in self.action_references:
                if _item_action_references:
                    _items.append(_item_action_references.to_dict())
            _dict['ActionReferences'] = _items
        # set to None if event_code (nullable) is None
        # and model_fields_set contains the field
        if self.event_code is None and "event_code" in self.model_fields_set:
            _dict['EventCode'] = None

        # set to None if chamber_code (nullable) is None
        # and model_fields_set contains the field
        if self.chamber_code is None and "chamber_code" in self.model_fields_set:
            _dict['ChamberCode'] = None

        # set to None if category_code (nullable) is None
        # and model_fields_set contains the field
        if self.category_code is None and "category_code" in self.model_fields_set:
            _dict['CategoryCode'] = None

        # set to None if legislation_chamber_code (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_chamber_code is None and "legislation_chamber_code" in self.model_fields_set:
            _dict['LegislationChamberCode'] = None

        # set to None if is_passed (nullable) is None
        # and model_fields_set contains the field
        if self.is_passed is None and "is_passed" in self.model_fields_set:
            _dict['IsPassed'] = None

        # set to None if in_preview (nullable) is None
        # and model_fields_set contains the field
        if self.in_preview is None and "in_preview" in self.model_fields_set:
            _dict['InPreview'] = None

        # set to None if action_references (nullable) is None
        # and model_fields_set contains the field
        if self.action_references is None and "action_references" in self.model_fields_set:
            _dict['ActionReferences'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CalendarActionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CalendarActionID": obj.get("CalendarActionID"),
            "VoteDescription": obj.get("VoteDescription"),
            "Description": obj.get("Description"),
            "EventCode": obj.get("EventCode"),
            "ChamberCode": obj.get("ChamberCode"),
            "CategoryCode": obj.get("CategoryCode"),
            "CalendarCategoryTypeID": obj.get("CalendarCategoryTypeID"),
            "LegislationChamberCode": obj.get("LegislationChamberCode"),
            "IsPassed": obj.get("IsPassed"),
            "InPreview": obj.get("InPreview"),
            "ActionReferences": [CalendarActionReferenceResponse.from_dict(_item) for _item in obj["ActionReferences"]] if obj.get("ActionReferences") is not None else None
        })
        return _obj


