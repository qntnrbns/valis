# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from valis.models.public_communication_file import PublicCommunicationFile
from typing import Optional, Set
from typing_extensions import Self

class PublicCommunicationsList(BaseModel):
    """
    List of Public Communication Files
    """ # noqa: E501
    communication_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Communication", alias="CommunicationID")
    communication_date: Optional[datetime] = Field(default=None, description="Communication date", alias="CommunicationDate")
    communication_number: Optional[StrictInt] = Field(default=None, description="Communication Number", alias="CommunicationNumber")
    reference_number: Optional[StrictStr] = Field(default=None, description="Reference Number", alias="ReferenceNumber")
    is_public: Optional[StrictBool] = Field(default=None, description="Is this Communication public?", alias="IsPublic")
    communication_type_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Communication Type", alias="CommunicationTypeID")
    communication_type: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="Communication Type name", alias="CommunicationType")
    chamber_code: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=1)]] = Field(default=None, description="Chamber code (H/S)", alias="ChamberCode")
    session_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Session", alias="SessionID")
    show_signature_note: Optional[StrictBool] = Field(default=None, description="Show Signature Note", alias="ShowSignatureNote")
    communication_files: Optional[List[PublicCommunicationFile]] = Field(default=None, description="List of Public Communication Files", alias="CommunicationFiles")
    __properties: ClassVar[List[str]] = ["CommunicationID", "CommunicationDate", "CommunicationNumber", "ReferenceNumber", "IsPublic", "CommunicationTypeID", "CommunicationType", "ChamberCode", "SessionID", "ShowSignatureNote", "CommunicationFiles"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicCommunicationsList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in communication_files (list)
        _items = []
        if self.communication_files:
            for _item_communication_files in self.communication_files:
                if _item_communication_files:
                    _items.append(_item_communication_files.to_dict())
            _dict['CommunicationFiles'] = _items
        # set to None if reference_number (nullable) is None
        # and model_fields_set contains the field
        if self.reference_number is None and "reference_number" in self.model_fields_set:
            _dict['ReferenceNumber'] = None

        # set to None if communication_type (nullable) is None
        # and model_fields_set contains the field
        if self.communication_type is None and "communication_type" in self.model_fields_set:
            _dict['CommunicationType'] = None

        # set to None if chamber_code (nullable) is None
        # and model_fields_set contains the field
        if self.chamber_code is None and "chamber_code" in self.model_fields_set:
            _dict['ChamberCode'] = None

        # set to None if show_signature_note (nullable) is None
        # and model_fields_set contains the field
        if self.show_signature_note is None and "show_signature_note" in self.model_fields_set:
            _dict['ShowSignatureNote'] = None

        # set to None if communication_files (nullable) is None
        # and model_fields_set contains the field
        if self.communication_files is None and "communication_files" in self.model_fields_set:
            _dict['CommunicationFiles'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicCommunicationsList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CommunicationID": obj.get("CommunicationID"),
            "CommunicationDate": obj.get("CommunicationDate"),
            "CommunicationNumber": obj.get("CommunicationNumber"),
            "ReferenceNumber": obj.get("ReferenceNumber"),
            "IsPublic": obj.get("IsPublic"),
            "CommunicationTypeID": obj.get("CommunicationTypeID"),
            "CommunicationType": obj.get("CommunicationType"),
            "ChamberCode": obj.get("ChamberCode"),
            "SessionID": obj.get("SessionID"),
            "ShowSignatureNote": obj.get("ShowSignatureNote"),
            "CommunicationFiles": [PublicCommunicationFile.from_dict(_item) for _item in obj["CommunicationFiles"]] if obj.get("CommunicationFiles") is not None else None
        })
        return _obj


