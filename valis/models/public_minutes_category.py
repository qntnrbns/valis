# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from valis.models.public_minutes_entry import PublicMinutesEntry
from typing import Optional, Set
from typing_extensions import Self

class PublicMinutesCategory(BaseModel):
    """
    Public Minutes Category that usually contains multiple entries
    """ # noqa: E501
    minutes_book_id: Optional[StrictInt] = Field(default=None, description="unique identifier for Minutes Book", alias="MinutesBookID")
    sequence: Optional[StrictInt] = Field(default=None, description="unique identifier for Sequence", alias="Sequence")
    calendar_category_type_id: Optional[StrictInt] = Field(default=None, description="unique identifier for Calendar Category type", alias="CalendarCategoryTypeID")
    category_description: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, description="Category description", alias="CategoryDescription")
    category_text: Optional[StrictStr] = Field(default=None, description="Category Text", alias="CategoryText")
    release_to_preview: Optional[StrictBool] = Field(default=None, description="is it Released To Preview or not", alias="ReleaseToPreview")
    category_type_id: Optional[StrictInt] = Field(default=None, description="unique identifier for Category type", alias="CategoryTypeID")
    category_type: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="Category type", alias="CategoryType")
    display_type: Optional[StrictBool] = Field(default=None, description="display type is true/false", alias="DisplayType")
    chamber_code: Optional[Annotated[str, Field(strict=True, max_length=1)]] = Field(default=None, description="Chamber Code (H=House/S=Senate)", alias="ChamberCode")
    category_code: Optional[StrictStr] = Field(default=None, description="Category Code", alias="CategoryCode")
    deletion_date: Optional[datetime] = Field(default=None, description="Deletion Date", alias="DeletionDate")
    minutes_category_id: Optional[StrictInt] = Field(default=None, description="unique identifier for Minutes Category", alias="MinutesCategoryID")
    minutes_entries: Optional[List[PublicMinutesEntry]] = Field(default=None, description="Collection of associated entries", alias="MinutesEntries")
    __properties: ClassVar[List[str]] = ["MinutesBookID", "Sequence", "CalendarCategoryTypeID", "CategoryDescription", "CategoryText", "ReleaseToPreview", "CategoryTypeID", "CategoryType", "DisplayType", "ChamberCode", "CategoryCode", "DeletionDate", "MinutesCategoryID", "MinutesEntries"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicMinutesCategory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in minutes_entries (list)
        _items = []
        if self.minutes_entries:
            for _item_minutes_entries in self.minutes_entries:
                if _item_minutes_entries:
                    _items.append(_item_minutes_entries.to_dict())
            _dict['MinutesEntries'] = _items
        # set to None if minutes_book_id (nullable) is None
        # and model_fields_set contains the field
        if self.minutes_book_id is None and "minutes_book_id" in self.model_fields_set:
            _dict['MinutesBookID'] = None

        # set to None if sequence (nullable) is None
        # and model_fields_set contains the field
        if self.sequence is None and "sequence" in self.model_fields_set:
            _dict['Sequence'] = None

        # set to None if calendar_category_type_id (nullable) is None
        # and model_fields_set contains the field
        if self.calendar_category_type_id is None and "calendar_category_type_id" in self.model_fields_set:
            _dict['CalendarCategoryTypeID'] = None

        # set to None if category_description (nullable) is None
        # and model_fields_set contains the field
        if self.category_description is None and "category_description" in self.model_fields_set:
            _dict['CategoryDescription'] = None

        # set to None if category_text (nullable) is None
        # and model_fields_set contains the field
        if self.category_text is None and "category_text" in self.model_fields_set:
            _dict['CategoryText'] = None

        # set to None if category_type_id (nullable) is None
        # and model_fields_set contains the field
        if self.category_type_id is None and "category_type_id" in self.model_fields_set:
            _dict['CategoryTypeID'] = None

        # set to None if category_type (nullable) is None
        # and model_fields_set contains the field
        if self.category_type is None and "category_type" in self.model_fields_set:
            _dict['CategoryType'] = None

        # set to None if chamber_code (nullable) is None
        # and model_fields_set contains the field
        if self.chamber_code is None and "chamber_code" in self.model_fields_set:
            _dict['ChamberCode'] = None

        # set to None if category_code (nullable) is None
        # and model_fields_set contains the field
        if self.category_code is None and "category_code" in self.model_fields_set:
            _dict['CategoryCode'] = None

        # set to None if deletion_date (nullable) is None
        # and model_fields_set contains the field
        if self.deletion_date is None and "deletion_date" in self.model_fields_set:
            _dict['DeletionDate'] = None

        # set to None if minutes_entries (nullable) is None
        # and model_fields_set contains the field
        if self.minutes_entries is None and "minutes_entries" in self.model_fields_set:
            _dict['MinutesEntries'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicMinutesCategory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "MinutesBookID": obj.get("MinutesBookID"),
            "Sequence": obj.get("Sequence"),
            "CalendarCategoryTypeID": obj.get("CalendarCategoryTypeID"),
            "CategoryDescription": obj.get("CategoryDescription"),
            "CategoryText": obj.get("CategoryText"),
            "ReleaseToPreview": obj.get("ReleaseToPreview"),
            "CategoryTypeID": obj.get("CategoryTypeID"),
            "CategoryType": obj.get("CategoryType"),
            "DisplayType": obj.get("DisplayType"),
            "ChamberCode": obj.get("ChamberCode"),
            "CategoryCode": obj.get("CategoryCode"),
            "DeletionDate": obj.get("DeletionDate"),
            "MinutesCategoryID": obj.get("MinutesCategoryID"),
            "MinutesEntries": [PublicMinutesEntry.from_dict(_item) for _item in obj["MinutesEntries"]] if obj.get("MinutesEntries") is not None else None
        })
        return _obj


