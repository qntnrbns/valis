# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CreatePartnerRequest(BaseModel):
    """
    Create partner request object containing user information
    """ # noqa: E501
    hashed_word: StrictStr = Field(description="API Registration URL hash - REQUIRED", alias="HashedWord")
    contact_name: Annotated[str, Field(strict=True, max_length=100)] = Field(description="contact name", alias="ContactName")
    organization_name: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="organization name", alias="OrganizationName")
    url: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="URL", alias="Url")
    phone: Annotated[str, Field(strict=True, max_length=15)] = Field(description="Contact Phone", alias="Phone")
    eula_date: Optional[datetime] = Field(default=None, description="EULA Date", alias="EulaDate")
    __properties: ClassVar[List[str]] = ["HashedWord", "ContactName", "OrganizationName", "Url", "Phone", "EulaDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreatePartnerRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if organization_name (nullable) is None
        # and model_fields_set contains the field
        if self.organization_name is None and "organization_name" in self.model_fields_set:
            _dict['OrganizationName'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['Url'] = None

        # set to None if eula_date (nullable) is None
        # and model_fields_set contains the field
        if self.eula_date is None and "eula_date" in self.model_fields_set:
            _dict['EulaDate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreatePartnerRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "HashedWord": obj.get("HashedWord"),
            "ContactName": obj.get("ContactName"),
            "OrganizationName": obj.get("OrganizationName"),
            "Url": obj.get("Url"),
            "Phone": obj.get("Phone"),
            "EulaDate": obj.get("EulaDate")
        })
        return _obj


