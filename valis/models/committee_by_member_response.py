# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CommitteeByMemberResponse(BaseModel):
    """
    Information for a Committee associated to a member
    """ # noqa: E501
    parent_committee_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for parent Committee", alias="ParentCommitteeID")
    committee_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for this Committee", alias="CommitteeID")
    name: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="Committee name", alias="Name")
    session_code: Optional[StrictStr] = Field(default=None, description="Session code (e.g. 20181)", alias="SessionCode")
    committee_number: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(default=None, description="Committee number (e.g. S10)", alias="CommitteeNumber")
    chamber_code: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=1)]] = Field(default=None, description="Chamber code (H/S)", alias="ChamberCode")
    __properties: ClassVar[List[str]] = ["ParentCommitteeID", "CommitteeID", "Name", "SessionCode", "CommitteeNumber", "ChamberCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CommitteeByMemberResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if parent_committee_id (nullable) is None
        # and model_fields_set contains the field
        if self.parent_committee_id is None and "parent_committee_id" in self.model_fields_set:
            _dict['ParentCommitteeID'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['Name'] = None

        # set to None if session_code (nullable) is None
        # and model_fields_set contains the field
        if self.session_code is None and "session_code" in self.model_fields_set:
            _dict['SessionCode'] = None

        # set to None if committee_number (nullable) is None
        # and model_fields_set contains the field
        if self.committee_number is None and "committee_number" in self.model_fields_set:
            _dict['CommitteeNumber'] = None

        # set to None if chamber_code (nullable) is None
        # and model_fields_set contains the field
        if self.chamber_code is None and "chamber_code" in self.model_fields_set:
            _dict['ChamberCode'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CommitteeByMemberResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ParentCommitteeID": obj.get("ParentCommitteeID"),
            "CommitteeID": obj.get("CommitteeID"),
            "Name": obj.get("Name"),
            "SessionCode": obj.get("SessionCode"),
            "CommitteeNumber": obj.get("CommitteeNumber"),
            "ChamberCode": obj.get("ChamberCode")
        })
        return _obj


