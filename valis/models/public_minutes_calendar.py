# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PublicMinutesCalendar(BaseModel):
    """
    public minute calendars
    """ # noqa: E501
    minutes_book_id: Optional[StrictInt] = Field(default=None, description="Minutes unique identifier", alias="MinutesBookID")
    calendar_id: Optional[StrictInt] = Field(default=None, description="unique identifier for Calendar", alias="CalendarID")
    calendar_number: Optional[StrictInt] = Field(default=None, description="Number for Calendar", alias="CalendarNumber")
    description: Optional[Annotated[str, Field(strict=True, max_length=250)]] = Field(default=None, description="Calendar description", alias="Description")
    minutes_status_id: Optional[StrictInt] = Field(default=None, description="Minutes Status ID", alias="MinutesStatusID")
    calendar_date: Optional[datetime] = Field(default=None, description="Calendar Date", alias="CalendarDate")
    status: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="Status", alias="Status")
    status_date: Optional[datetime] = Field(default=None, description="Status Date", alias="StatusDate")
    deletion_date: Optional[datetime] = Field(default=None, description="Deletion Date", alias="DeletionDate")
    __properties: ClassVar[List[str]] = ["MinutesBookID", "CalendarID", "CalendarNumber", "Description", "MinutesStatusID", "CalendarDate", "Status", "StatusDate", "DeletionDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicMinutesCalendar from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if minutes_book_id (nullable) is None
        # and model_fields_set contains the field
        if self.minutes_book_id is None and "minutes_book_id" in self.model_fields_set:
            _dict['MinutesBookID'] = None

        # set to None if calendar_id (nullable) is None
        # and model_fields_set contains the field
        if self.calendar_id is None and "calendar_id" in self.model_fields_set:
            _dict['CalendarID'] = None

        # set to None if calendar_number (nullable) is None
        # and model_fields_set contains the field
        if self.calendar_number is None and "calendar_number" in self.model_fields_set:
            _dict['CalendarNumber'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['Description'] = None

        # set to None if minutes_status_id (nullable) is None
        # and model_fields_set contains the field
        if self.minutes_status_id is None and "minutes_status_id" in self.model_fields_set:
            _dict['MinutesStatusID'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['Status'] = None

        # set to None if deletion_date (nullable) is None
        # and model_fields_set contains the field
        if self.deletion_date is None and "deletion_date" in self.model_fields_set:
            _dict['DeletionDate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicMinutesCalendar from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "MinutesBookID": obj.get("MinutesBookID"),
            "CalendarID": obj.get("CalendarID"),
            "CalendarNumber": obj.get("CalendarNumber"),
            "Description": obj.get("Description"),
            "MinutesStatusID": obj.get("MinutesStatusID"),
            "CalendarDate": obj.get("CalendarDate"),
            "Status": obj.get("Status"),
            "StatusDate": obj.get("StatusDate"),
            "DeletionDate": obj.get("DeletionDate")
        })
        return _obj


