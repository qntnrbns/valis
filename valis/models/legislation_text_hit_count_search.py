# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from valis.models.legislation_text_hit_count_document import LegislationTextHitCountDocument
from valis.models.legislation_text_hit_count_word import LegislationTextHitCountWord
from typing import Optional, Set
from typing_extensions import Self

class LegislationTextHitCountSearch(BaseModel):
    """
    LegislationTextHitCountSearch
    """ # noqa: E501
    documents: Optional[List[LegislationTextHitCountDocument]] = Field(default=None, alias="Documents")
    location: Optional[StrictStr] = Field(default=None, alias="Location")
    keyword_expression: Optional[StrictStr] = Field(default=None, alias="KeywordExpression")
    word_list: Optional[List[LegislationTextHitCountWord]] = Field(default=None, alias="WordList")
    __properties: ClassVar[List[str]] = ["Documents", "Location", "KeywordExpression", "WordList"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LegislationTextHitCountSearch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in documents (list)
        _items = []
        if self.documents:
            for _item_documents in self.documents:
                if _item_documents:
                    _items.append(_item_documents.to_dict())
            _dict['Documents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in word_list (list)
        _items = []
        if self.word_list:
            for _item_word_list in self.word_list:
                if _item_word_list:
                    _items.append(_item_word_list.to_dict())
            _dict['WordList'] = _items
        # set to None if documents (nullable) is None
        # and model_fields_set contains the field
        if self.documents is None and "documents" in self.model_fields_set:
            _dict['Documents'] = None

        # set to None if location (nullable) is None
        # and model_fields_set contains the field
        if self.location is None and "location" in self.model_fields_set:
            _dict['Location'] = None

        # set to None if keyword_expression (nullable) is None
        # and model_fields_set contains the field
        if self.keyword_expression is None and "keyword_expression" in self.model_fields_set:
            _dict['KeywordExpression'] = None

        # set to None if word_list (nullable) is None
        # and model_fields_set contains the field
        if self.word_list is None and "word_list" in self.model_fields_set:
            _dict['WordList'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LegislationTextHitCountSearch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Documents": [LegislationTextHitCountDocument.from_dict(_item) for _item in obj["Documents"]] if obj.get("Documents") is not None else None,
            "Location": obj.get("Location"),
            "KeywordExpression": obj.get("KeywordExpression"),
            "WordList": [LegislationTextHitCountWord.from_dict(_item) for _item in obj["WordList"]] if obj.get("WordList") is not None else None
        })
        return _obj


