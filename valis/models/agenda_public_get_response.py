# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from valis.models.agenda_item_public_get_response import AgendaItemPublicGetResponse
from valis.models.patron_partner_get_response import PatronPartnerGetResponse
from typing import Optional, Set
from typing_extensions import Self

class AgendaPublicGetResponse(BaseModel):
    """
    Public Agenda Get Response (includes Id)
    """ # noqa: E501
    sequence: Optional[StrictInt] = Field(default=None, description="Sequence of Agenda", alias="Sequence")
    calendar_category_id: Optional[StrictInt] = Field(default=None, description="Calendar Category ID", alias="CalendarCategoryID")
    is_hidden: Optional[StrictBool] = Field(default=None, description="Is the CalendarCategoryTemplate hidden?", alias="IsHidden")
    description: Optional[Annotated[str, Field(strict=True, max_length=8000)]] = Field(default=None, description="Description", alias="Description")
    legislation_id: Optional[StrictInt] = Field(default=None, description="Legislation ID", alias="LegislationID")
    legislation_key: Optional[StrictInt] = Field(default=None, description="Legislation Key", alias="LegislationKey")
    legislation_number: Optional[StrictStr] = Field(default=None, description="Legislation Number", alias="LegislationNumber")
    legislation_description: Optional[StrictStr] = Field(default=None, description="Legislation Description", alias="LegislationDescription")
    ld_number: Optional[StrictStr] = Field(default=None, description="Legislation Draft (LD)Number", alias="LDNumber")
    summary: Optional[StrictStr] = Field(default=None, description="Legislation Summary", alias="Summary")
    draft_title: Optional[StrictStr] = Field(default=None, description="Draft Title", alias="DraftTitle")
    is_active: Optional[StrictBool] = Field(default=None, description="is Agenda Item active", alias="IsActive")
    calendar_category_template_id: Optional[StrictInt] = Field(default=None, description="Calendar Category Template ID", alias="CalendarCategoryTemplateID")
    communication_id: Optional[StrictInt] = Field(default=None, description="Communication ID", alias="CommunicationID")
    page_number: Optional[StrictInt] = Field(default=None, description="Page Number", alias="PageNumber")
    effective_type: Optional[StrictStr] = Field(default=None, description="Effective Type", alias="EffectiveType")
    committee_id: Optional[StrictInt] = Field(default=None, alias="CommitteeID")
    candidate_date: Optional[datetime] = Field(default=None, alias="CandidateDate")
    agenda_id: StrictInt = Field(description="Agenda unique identifier", alias="AgendaID")
    patrons: Optional[List[PatronPartnerGetResponse]] = Field(default=None, description="list of Patrons for an agenda", alias="Patrons")
    agenda_items: Optional[List[AgendaItemPublicGetResponse]] = Field(default=None, description="list of Agenda Items for Agenda", alias="AgendaItems")
    display_type: Optional[StrictBool] = Field(default=None, description="should the calendar item's type be displayed", alias="DisplayType")
    legislation_title: Optional[StrictStr] = Field(default=None, description="Legislation Title", alias="LegislationTitle")
    __properties: ClassVar[List[str]] = ["Sequence", "CalendarCategoryID", "IsHidden", "Description", "LegislationID", "LegislationKey", "LegislationNumber", "LegislationDescription", "LDNumber", "Summary", "DraftTitle", "IsActive", "CalendarCategoryTemplateID", "CommunicationID", "PageNumber", "EffectiveType", "CommitteeID", "CandidateDate", "AgendaID", "Patrons", "AgendaItems", "DisplayType", "LegislationTitle"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgendaPublicGetResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in patrons (list)
        _items = []
        if self.patrons:
            for _item_patrons in self.patrons:
                if _item_patrons:
                    _items.append(_item_patrons.to_dict())
            _dict['Patrons'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in agenda_items (list)
        _items = []
        if self.agenda_items:
            for _item_agenda_items in self.agenda_items:
                if _item_agenda_items:
                    _items.append(_item_agenda_items.to_dict())
            _dict['AgendaItems'] = _items
        # set to None if sequence (nullable) is None
        # and model_fields_set contains the field
        if self.sequence is None and "sequence" in self.model_fields_set:
            _dict['Sequence'] = None

        # set to None if calendar_category_id (nullable) is None
        # and model_fields_set contains the field
        if self.calendar_category_id is None and "calendar_category_id" in self.model_fields_set:
            _dict['CalendarCategoryID'] = None

        # set to None if is_hidden (nullable) is None
        # and model_fields_set contains the field
        if self.is_hidden is None and "is_hidden" in self.model_fields_set:
            _dict['IsHidden'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['Description'] = None

        # set to None if legislation_id (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_id is None and "legislation_id" in self.model_fields_set:
            _dict['LegislationID'] = None

        # set to None if legislation_key (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_key is None and "legislation_key" in self.model_fields_set:
            _dict['LegislationKey'] = None

        # set to None if legislation_number (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_number is None and "legislation_number" in self.model_fields_set:
            _dict['LegislationNumber'] = None

        # set to None if legislation_description (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_description is None and "legislation_description" in self.model_fields_set:
            _dict['LegislationDescription'] = None

        # set to None if ld_number (nullable) is None
        # and model_fields_set contains the field
        if self.ld_number is None and "ld_number" in self.model_fields_set:
            _dict['LDNumber'] = None

        # set to None if summary (nullable) is None
        # and model_fields_set contains the field
        if self.summary is None and "summary" in self.model_fields_set:
            _dict['Summary'] = None

        # set to None if draft_title (nullable) is None
        # and model_fields_set contains the field
        if self.draft_title is None and "draft_title" in self.model_fields_set:
            _dict['DraftTitle'] = None

        # set to None if is_active (nullable) is None
        # and model_fields_set contains the field
        if self.is_active is None and "is_active" in self.model_fields_set:
            _dict['IsActive'] = None

        # set to None if calendar_category_template_id (nullable) is None
        # and model_fields_set contains the field
        if self.calendar_category_template_id is None and "calendar_category_template_id" in self.model_fields_set:
            _dict['CalendarCategoryTemplateID'] = None

        # set to None if communication_id (nullable) is None
        # and model_fields_set contains the field
        if self.communication_id is None and "communication_id" in self.model_fields_set:
            _dict['CommunicationID'] = None

        # set to None if page_number (nullable) is None
        # and model_fields_set contains the field
        if self.page_number is None and "page_number" in self.model_fields_set:
            _dict['PageNumber'] = None

        # set to None if effective_type (nullable) is None
        # and model_fields_set contains the field
        if self.effective_type is None and "effective_type" in self.model_fields_set:
            _dict['EffectiveType'] = None

        # set to None if committee_id (nullable) is None
        # and model_fields_set contains the field
        if self.committee_id is None and "committee_id" in self.model_fields_set:
            _dict['CommitteeID'] = None

        # set to None if candidate_date (nullable) is None
        # and model_fields_set contains the field
        if self.candidate_date is None and "candidate_date" in self.model_fields_set:
            _dict['CandidateDate'] = None

        # set to None if patrons (nullable) is None
        # and model_fields_set contains the field
        if self.patrons is None and "patrons" in self.model_fields_set:
            _dict['Patrons'] = None

        # set to None if agenda_items (nullable) is None
        # and model_fields_set contains the field
        if self.agenda_items is None and "agenda_items" in self.model_fields_set:
            _dict['AgendaItems'] = None

        # set to None if display_type (nullable) is None
        # and model_fields_set contains the field
        if self.display_type is None and "display_type" in self.model_fields_set:
            _dict['DisplayType'] = None

        # set to None if legislation_title (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_title is None and "legislation_title" in self.model_fields_set:
            _dict['LegislationTitle'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgendaPublicGetResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Sequence": obj.get("Sequence"),
            "CalendarCategoryID": obj.get("CalendarCategoryID"),
            "IsHidden": obj.get("IsHidden"),
            "Description": obj.get("Description"),
            "LegislationID": obj.get("LegislationID"),
            "LegislationKey": obj.get("LegislationKey"),
            "LegislationNumber": obj.get("LegislationNumber"),
            "LegislationDescription": obj.get("LegislationDescription"),
            "LDNumber": obj.get("LDNumber"),
            "Summary": obj.get("Summary"),
            "DraftTitle": obj.get("DraftTitle"),
            "IsActive": obj.get("IsActive"),
            "CalendarCategoryTemplateID": obj.get("CalendarCategoryTemplateID"),
            "CommunicationID": obj.get("CommunicationID"),
            "PageNumber": obj.get("PageNumber"),
            "EffectiveType": obj.get("EffectiveType"),
            "CommitteeID": obj.get("CommitteeID"),
            "CandidateDate": obj.get("CandidateDate"),
            "AgendaID": obj.get("AgendaID"),
            "Patrons": [PatronPartnerGetResponse.from_dict(_item) for _item in obj["Patrons"]] if obj.get("Patrons") is not None else None,
            "AgendaItems": [AgendaItemPublicGetResponse.from_dict(_item) for _item in obj["AgendaItems"]] if obj.get("AgendaItems") is not None else None,
            "DisplayType": obj.get("DisplayType"),
            "LegislationTitle": obj.get("LegislationTitle")
        })
        return _obj


