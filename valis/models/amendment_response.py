# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AmendmentResponse(BaseModel):
    """
    Amendment Response
    """ # noqa: E501
    legislation_id: Optional[StrictInt] = Field(default=None, description="Legislation unique identifier", alias="LegislationID")
    legislation_text_id: Optional[StrictInt] = Field(default=None, description="Legislation Text unique identifier", alias="LegislationTextID")
    legislation_version_id: Optional[StrictInt] = Field(default=None, description="Legislation Version unique identifier", alias="LegislationVersionID")
    legislation_version: Optional[StrictStr] = Field(default=None, description="Legislative Version", alias="LegislationVersion")
    text_disposition_id: Optional[StrictInt] = Field(default=None, description="unique identifier for Text Disposition (e.g. 1=Offered, 2=Recommended, 3=Reported, etc)", alias="TextDispositionID")
    text_disposition: Optional[StrictStr] = Field(default=None, description="Text Disposition (e.g. Offered, Recommended, Reported, etc)", alias="TextDisposition")
    is_active: Optional[StrictBool] = Field(default=None, description="Active for use?", alias="IsActive")
    is_public: Optional[StrictBool] = Field(default=None, description="Public Consumption?", alias="IsPublic")
    document_code: Optional[StrictStr] = Field(default=None, description="document code", alias="DocumentCode")
    chamber_code: Optional[StrictStr] = Field(default=None, description="Amendment ChamberCode", alias="ChamberCode")
    description: Optional[StrictStr] = Field(default=None, description="LegislationText Description", alias="Description")
    ld_number: Optional[StrictStr] = Field(default=None, description="LD Number", alias="LDNumber")
    version_date: Optional[StrictStr] = Field(default=None, description="Version Date", alias="VersionDate")
    __properties: ClassVar[List[str]] = ["LegislationID", "LegislationTextID", "LegislationVersionID", "LegislationVersion", "TextDispositionID", "TextDisposition", "IsActive", "IsPublic", "DocumentCode", "ChamberCode", "Description", "LDNumber", "VersionDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AmendmentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if legislation_id (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_id is None and "legislation_id" in self.model_fields_set:
            _dict['LegislationID'] = None

        # set to None if legislation_version (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_version is None and "legislation_version" in self.model_fields_set:
            _dict['LegislationVersion'] = None

        # set to None if text_disposition (nullable) is None
        # and model_fields_set contains the field
        if self.text_disposition is None and "text_disposition" in self.model_fields_set:
            _dict['TextDisposition'] = None

        # set to None if document_code (nullable) is None
        # and model_fields_set contains the field
        if self.document_code is None and "document_code" in self.model_fields_set:
            _dict['DocumentCode'] = None

        # set to None if chamber_code (nullable) is None
        # and model_fields_set contains the field
        if self.chamber_code is None and "chamber_code" in self.model_fields_set:
            _dict['ChamberCode'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['Description'] = None

        # set to None if ld_number (nullable) is None
        # and model_fields_set contains the field
        if self.ld_number is None and "ld_number" in self.model_fields_set:
            _dict['LDNumber'] = None

        # set to None if version_date (nullable) is None
        # and model_fields_set contains the field
        if self.version_date is None and "version_date" in self.model_fields_set:
            _dict['VersionDate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AmendmentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "LegislationID": obj.get("LegislationID"),
            "LegislationTextID": obj.get("LegislationTextID"),
            "LegislationVersionID": obj.get("LegislationVersionID"),
            "LegislationVersion": obj.get("LegislationVersion"),
            "TextDispositionID": obj.get("TextDispositionID"),
            "TextDisposition": obj.get("TextDisposition"),
            "IsActive": obj.get("IsActive"),
            "IsPublic": obj.get("IsPublic"),
            "DocumentCode": obj.get("DocumentCode"),
            "ChamberCode": obj.get("ChamberCode"),
            "Description": obj.get("Description"),
            "LDNumber": obj.get("LDNumber"),
            "VersionDate": obj.get("VersionDate")
        })
        return _obj


