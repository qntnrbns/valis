# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PublicShallowVoteResponse(BaseModel):
    """
    List of Public Shallow Votes
    """ # noqa: E501
    vote_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Vote", alias="VoteID")
    chamber_code: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=1)]] = Field(default=None, description="Chamber code (H/S)", alias="ChamberCode")
    committee_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Committee", alias="CommitteeID")
    committee_name: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="Committee name", alias="CommitteeName")
    legislation_number: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="Legislation number", alias="LegislationNumber")
    reference_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Reference", alias="ReferenceID")
    reference_number: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="Reference number", alias="ReferenceNumber")
    vote_number: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="Vote number", alias="VoteNumber")
    is_voice: Optional[StrictBool] = Field(default=None, description="Is it a voice vote?", alias="IsVoice")
    is_block: Optional[StrictBool] = Field(default=None, description="Is it a block vote?", alias="IsBlock")
    is_public: Optional[StrictBool] = Field(default=None, description="Is it public?", alias="IsPublic")
    session_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Session", alias="SessionID")
    session_code: Optional[StrictStr] = Field(default=None, description="Session code (e.g. 20181)", alias="SessionCode")
    vote_date: datetime = Field(description="Vote date", alias="VoteDate")
    sequence: Optional[StrictInt] = Field(default=None, description="Vote Sequence", alias="Sequence")
    vote_type_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Vote Type", alias="VoteTypeID")
    vote_type: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="Vote Type name", alias="VoteType")
    batch_number: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="Vote Batch number", alias="BatchNumber")
    description: Optional[Annotated[str, Field(strict=True, max_length=250)]] = Field(default=None, description="Vote description", alias="Description")
    vote_tally: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="Vote Tally", alias="VoteTally")
    vote_room_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Vote Room", alias="VoteRoomID")
    room_description: Optional[Annotated[str, Field(strict=True, max_length=250)]] = Field(default=None, description="Room description", alias="RoomDescription")
    event_code: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(default=None, description="Event Code (motion code / history action)", alias="EventCode")
    vote_action_description: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, description="Vote Action description", alias="VoteActionDescription")
    vote_action_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Vote Action", alias="VoteActionID")
    vote_classification_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Vote Classification", alias="VoteClassificationID")
    refer_to_committee_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Refer to Committee", alias="ReferToCommitteeID")
    refer_to_committee_number: Optional[StrictStr] = Field(default=None, description="Refer to Committee number", alias="ReferToCommitteeNumber")
    classification_name: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="Vote Classification name", alias="ClassificationName")
    __properties: ClassVar[List[str]] = ["VoteID", "ChamberCode", "CommitteeID", "CommitteeName", "LegislationNumber", "ReferenceID", "ReferenceNumber", "VoteNumber", "IsVoice", "IsBlock", "IsPublic", "SessionID", "SessionCode", "VoteDate", "Sequence", "VoteTypeID", "VoteType", "BatchNumber", "Description", "VoteTally", "VoteRoomID", "RoomDescription", "EventCode", "VoteActionDescription", "VoteActionID", "VoteClassificationID", "ReferToCommitteeID", "ReferToCommitteeNumber", "ClassificationName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicShallowVoteResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if vote_id (nullable) is None
        # and model_fields_set contains the field
        if self.vote_id is None and "vote_id" in self.model_fields_set:
            _dict['VoteID'] = None

        # set to None if chamber_code (nullable) is None
        # and model_fields_set contains the field
        if self.chamber_code is None and "chamber_code" in self.model_fields_set:
            _dict['ChamberCode'] = None

        # set to None if committee_id (nullable) is None
        # and model_fields_set contains the field
        if self.committee_id is None and "committee_id" in self.model_fields_set:
            _dict['CommitteeID'] = None

        # set to None if committee_name (nullable) is None
        # and model_fields_set contains the field
        if self.committee_name is None and "committee_name" in self.model_fields_set:
            _dict['CommitteeName'] = None

        # set to None if legislation_number (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_number is None and "legislation_number" in self.model_fields_set:
            _dict['LegislationNumber'] = None

        # set to None if reference_id (nullable) is None
        # and model_fields_set contains the field
        if self.reference_id is None and "reference_id" in self.model_fields_set:
            _dict['ReferenceID'] = None

        # set to None if reference_number (nullable) is None
        # and model_fields_set contains the field
        if self.reference_number is None and "reference_number" in self.model_fields_set:
            _dict['ReferenceNumber'] = None

        # set to None if vote_number (nullable) is None
        # and model_fields_set contains the field
        if self.vote_number is None and "vote_number" in self.model_fields_set:
            _dict['VoteNumber'] = None

        # set to None if session_id (nullable) is None
        # and model_fields_set contains the field
        if self.session_id is None and "session_id" in self.model_fields_set:
            _dict['SessionID'] = None

        # set to None if session_code (nullable) is None
        # and model_fields_set contains the field
        if self.session_code is None and "session_code" in self.model_fields_set:
            _dict['SessionCode'] = None

        # set to None if sequence (nullable) is None
        # and model_fields_set contains the field
        if self.sequence is None and "sequence" in self.model_fields_set:
            _dict['Sequence'] = None

        # set to None if vote_type_id (nullable) is None
        # and model_fields_set contains the field
        if self.vote_type_id is None and "vote_type_id" in self.model_fields_set:
            _dict['VoteTypeID'] = None

        # set to None if vote_type (nullable) is None
        # and model_fields_set contains the field
        if self.vote_type is None and "vote_type" in self.model_fields_set:
            _dict['VoteType'] = None

        # set to None if batch_number (nullable) is None
        # and model_fields_set contains the field
        if self.batch_number is None and "batch_number" in self.model_fields_set:
            _dict['BatchNumber'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['Description'] = None

        # set to None if vote_tally (nullable) is None
        # and model_fields_set contains the field
        if self.vote_tally is None and "vote_tally" in self.model_fields_set:
            _dict['VoteTally'] = None

        # set to None if vote_room_id (nullable) is None
        # and model_fields_set contains the field
        if self.vote_room_id is None and "vote_room_id" in self.model_fields_set:
            _dict['VoteRoomID'] = None

        # set to None if room_description (nullable) is None
        # and model_fields_set contains the field
        if self.room_description is None and "room_description" in self.model_fields_set:
            _dict['RoomDescription'] = None

        # set to None if event_code (nullable) is None
        # and model_fields_set contains the field
        if self.event_code is None and "event_code" in self.model_fields_set:
            _dict['EventCode'] = None

        # set to None if vote_action_description (nullable) is None
        # and model_fields_set contains the field
        if self.vote_action_description is None and "vote_action_description" in self.model_fields_set:
            _dict['VoteActionDescription'] = None

        # set to None if vote_action_id (nullable) is None
        # and model_fields_set contains the field
        if self.vote_action_id is None and "vote_action_id" in self.model_fields_set:
            _dict['VoteActionID'] = None

        # set to None if vote_classification_id (nullable) is None
        # and model_fields_set contains the field
        if self.vote_classification_id is None and "vote_classification_id" in self.model_fields_set:
            _dict['VoteClassificationID'] = None

        # set to None if refer_to_committee_id (nullable) is None
        # and model_fields_set contains the field
        if self.refer_to_committee_id is None and "refer_to_committee_id" in self.model_fields_set:
            _dict['ReferToCommitteeID'] = None

        # set to None if refer_to_committee_number (nullable) is None
        # and model_fields_set contains the field
        if self.refer_to_committee_number is None and "refer_to_committee_number" in self.model_fields_set:
            _dict['ReferToCommitteeNumber'] = None

        # set to None if classification_name (nullable) is None
        # and model_fields_set contains the field
        if self.classification_name is None and "classification_name" in self.model_fields_set:
            _dict['ClassificationName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicShallowVoteResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "VoteID": obj.get("VoteID"),
            "ChamberCode": obj.get("ChamberCode"),
            "CommitteeID": obj.get("CommitteeID"),
            "CommitteeName": obj.get("CommitteeName"),
            "LegislationNumber": obj.get("LegislationNumber"),
            "ReferenceID": obj.get("ReferenceID"),
            "ReferenceNumber": obj.get("ReferenceNumber"),
            "VoteNumber": obj.get("VoteNumber"),
            "IsVoice": obj.get("IsVoice"),
            "IsBlock": obj.get("IsBlock"),
            "IsPublic": obj.get("IsPublic"),
            "SessionID": obj.get("SessionID"),
            "SessionCode": obj.get("SessionCode"),
            "VoteDate": obj.get("VoteDate"),
            "Sequence": obj.get("Sequence"),
            "VoteTypeID": obj.get("VoteTypeID"),
            "VoteType": obj.get("VoteType"),
            "BatchNumber": obj.get("BatchNumber"),
            "Description": obj.get("Description"),
            "VoteTally": obj.get("VoteTally"),
            "VoteRoomID": obj.get("VoteRoomID"),
            "RoomDescription": obj.get("RoomDescription"),
            "EventCode": obj.get("EventCode"),
            "VoteActionDescription": obj.get("VoteActionDescription"),
            "VoteActionID": obj.get("VoteActionID"),
            "VoteClassificationID": obj.get("VoteClassificationID"),
            "ReferToCommitteeID": obj.get("ReferToCommitteeID"),
            "ReferToCommitteeNumber": obj.get("ReferToCommitteeNumber"),
            "ClassificationName": obj.get("ClassificationName")
        })
        return _obj


