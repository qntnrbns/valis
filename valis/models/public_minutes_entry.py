# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from valis.models.public_minutes_activity import PublicMinutesActivity
from valis.models.public_minutes_summary import PublicMinutesSummary
from typing import Optional, Set
from typing_extensions import Self

class PublicMinutesEntry(BaseModel):
    """
    Public information for a Minutes Entry
    """ # noqa: E501
    minutes_category_id: Optional[StrictInt] = Field(default=None, description="unique identifier for Minutes Category", alias="MinutesCategoryID")
    sequence: Optional[StrictInt] = Field(default=None, description="Minutes Entry order", alias="Sequence")
    legislation_id: Optional[StrictInt] = Field(default=None, description="unique identifier for Legislation", alias="LegislationID")
    legislation_number: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(default=None, description="Legislation Number", alias="LegislationNumber")
    legislation_description: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, description="Legislation Description", alias="LegislationDescription")
    agenda_id: Optional[StrictInt] = Field(default=None, description="unique identifier for Agenda", alias="AgendaID")
    entry_text: Optional[Annotated[str, Field(strict=True, max_length=4010)]] = Field(default=None, description="Entry Text", alias="EntryText")
    communication_id: Optional[StrictInt] = Field(default=None, description="unique identifier for Communication", alias="CommunicationID")
    legislation_chamber_code: Optional[Annotated[str, Field(strict=True, max_length=1)]] = Field(default=None, description="Legislation Chamber Code", alias="LegislationChamberCode")
    communication_reference_number: Optional[StrictStr] = Field(default=None, description="Communication Reference Number", alias="CommunicationReferenceNumber")
    is_public: Optional[StrictBool] = Field(default=None, description="is Minutesentry public ?", alias="IsPublic")
    communication_chamber_code: Optional[Annotated[str, Field(strict=True, max_length=1)]] = Field(default=None, description="Communication Chamber Code", alias="CommunicationChamberCode")
    communication_date: Optional[datetime] = Field(default=None, description="Communication Date", alias="CommunicationDate")
    communication_number: Optional[StrictInt] = Field(default=None, description="Communication Number", alias="CommunicationNumber")
    is_oob: Optional[StrictBool] = Field(default=None, description="Is Out of Block?", alias="IsOOB")
    release_to_preview: Optional[StrictBool] = Field(default=None, description="Release to Preview?", alias="ReleaseToPreview")
    minutes_date: Optional[datetime] = Field(default=None, alias="MinutesDate")
    minutes_entry_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Minutes Entry", alias="MinutesEntryID")
    minutes_activities: Optional[List[PublicMinutesActivity]] = Field(default=None, description="List of  Minutes Activities", alias="MinutesActivities")
    minutes_summaries: Optional[List[PublicMinutesSummary]] = Field(default=None, description="List of Minutes Summaries", alias="MinutesSummaries")
    __properties: ClassVar[List[str]] = ["MinutesCategoryID", "Sequence", "LegislationID", "LegislationNumber", "LegislationDescription", "AgendaID", "EntryText", "CommunicationID", "LegislationChamberCode", "CommunicationReferenceNumber", "IsPublic", "CommunicationChamberCode", "CommunicationDate", "CommunicationNumber", "IsOOB", "ReleaseToPreview", "MinutesDate", "MinutesEntryID", "MinutesActivities", "MinutesSummaries"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicMinutesEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in minutes_activities (list)
        _items = []
        if self.minutes_activities:
            for _item_minutes_activities in self.minutes_activities:
                if _item_minutes_activities:
                    _items.append(_item_minutes_activities.to_dict())
            _dict['MinutesActivities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in minutes_summaries (list)
        _items = []
        if self.minutes_summaries:
            for _item_minutes_summaries in self.minutes_summaries:
                if _item_minutes_summaries:
                    _items.append(_item_minutes_summaries.to_dict())
            _dict['MinutesSummaries'] = _items
        # set to None if minutes_category_id (nullable) is None
        # and model_fields_set contains the field
        if self.minutes_category_id is None and "minutes_category_id" in self.model_fields_set:
            _dict['MinutesCategoryID'] = None

        # set to None if sequence (nullable) is None
        # and model_fields_set contains the field
        if self.sequence is None and "sequence" in self.model_fields_set:
            _dict['Sequence'] = None

        # set to None if legislation_id (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_id is None and "legislation_id" in self.model_fields_set:
            _dict['LegislationID'] = None

        # set to None if legislation_number (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_number is None and "legislation_number" in self.model_fields_set:
            _dict['LegislationNumber'] = None

        # set to None if legislation_description (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_description is None and "legislation_description" in self.model_fields_set:
            _dict['LegislationDescription'] = None

        # set to None if agenda_id (nullable) is None
        # and model_fields_set contains the field
        if self.agenda_id is None and "agenda_id" in self.model_fields_set:
            _dict['AgendaID'] = None

        # set to None if entry_text (nullable) is None
        # and model_fields_set contains the field
        if self.entry_text is None and "entry_text" in self.model_fields_set:
            _dict['EntryText'] = None

        # set to None if communication_id (nullable) is None
        # and model_fields_set contains the field
        if self.communication_id is None and "communication_id" in self.model_fields_set:
            _dict['CommunicationID'] = None

        # set to None if legislation_chamber_code (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_chamber_code is None and "legislation_chamber_code" in self.model_fields_set:
            _dict['LegislationChamberCode'] = None

        # set to None if communication_reference_number (nullable) is None
        # and model_fields_set contains the field
        if self.communication_reference_number is None and "communication_reference_number" in self.model_fields_set:
            _dict['CommunicationReferenceNumber'] = None

        # set to None if communication_chamber_code (nullable) is None
        # and model_fields_set contains the field
        if self.communication_chamber_code is None and "communication_chamber_code" in self.model_fields_set:
            _dict['CommunicationChamberCode'] = None

        # set to None if communication_date (nullable) is None
        # and model_fields_set contains the field
        if self.communication_date is None and "communication_date" in self.model_fields_set:
            _dict['CommunicationDate'] = None

        # set to None if communication_number (nullable) is None
        # and model_fields_set contains the field
        if self.communication_number is None and "communication_number" in self.model_fields_set:
            _dict['CommunicationNumber'] = None

        # set to None if is_oob (nullable) is None
        # and model_fields_set contains the field
        if self.is_oob is None and "is_oob" in self.model_fields_set:
            _dict['IsOOB'] = None

        # set to None if release_to_preview (nullable) is None
        # and model_fields_set contains the field
        if self.release_to_preview is None and "release_to_preview" in self.model_fields_set:
            _dict['ReleaseToPreview'] = None

        # set to None if minutes_date (nullable) is None
        # and model_fields_set contains the field
        if self.minutes_date is None and "minutes_date" in self.model_fields_set:
            _dict['MinutesDate'] = None

        # set to None if minutes_activities (nullable) is None
        # and model_fields_set contains the field
        if self.minutes_activities is None and "minutes_activities" in self.model_fields_set:
            _dict['MinutesActivities'] = None

        # set to None if minutes_summaries (nullable) is None
        # and model_fields_set contains the field
        if self.minutes_summaries is None and "minutes_summaries" in self.model_fields_set:
            _dict['MinutesSummaries'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicMinutesEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "MinutesCategoryID": obj.get("MinutesCategoryID"),
            "Sequence": obj.get("Sequence"),
            "LegislationID": obj.get("LegislationID"),
            "LegislationNumber": obj.get("LegislationNumber"),
            "LegislationDescription": obj.get("LegislationDescription"),
            "AgendaID": obj.get("AgendaID"),
            "EntryText": obj.get("EntryText"),
            "CommunicationID": obj.get("CommunicationID"),
            "LegislationChamberCode": obj.get("LegislationChamberCode"),
            "CommunicationReferenceNumber": obj.get("CommunicationReferenceNumber"),
            "IsPublic": obj.get("IsPublic"),
            "CommunicationChamberCode": obj.get("CommunicationChamberCode"),
            "CommunicationDate": obj.get("CommunicationDate"),
            "CommunicationNumber": obj.get("CommunicationNumber"),
            "IsOOB": obj.get("IsOOB"),
            "ReleaseToPreview": obj.get("ReleaseToPreview"),
            "MinutesDate": obj.get("MinutesDate"),
            "MinutesEntryID": obj.get("MinutesEntryID"),
            "MinutesActivities": [PublicMinutesActivity.from_dict(_item) for _item in obj["MinutesActivities"]] if obj.get("MinutesActivities") is not None else None,
            "MinutesSummaries": [PublicMinutesSummary.from_dict(_item) for _item in obj["MinutesSummaries"]] if obj.get("MinutesSummaries") is not None else None
        })
        return _obj


