# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PublicVoteMemberResponse(BaseModel):
    """
    A Vote Member Vote Class   could be obtained, Success boolean will be false and additional information can be found   in the FailureMessage string.
    """ # noqa: E501
    vote_member_id: Optional[StrictInt] = Field(default=None, description="VoteMember unique identifier", alias="VoteMemberID")
    member_id: Optional[StrictInt] = Field(default=None, description="Member unique identifier", alias="MemberID")
    member_display_name: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="Member Display Name", alias="MemberDisplayName")
    patron_display_name: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="PatronDisplayName", alias="PatronDisplayName")
    member_number: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(default=None, description="Member Number", alias="MemberNumber")
    response_code: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=1)]] = Field(default=None, description="Response Code", alias="ResponseCode")
    vote_statement: Optional[Annotated[str, Field(strict=True, max_length=2500)]] = Field(default=None, description="Vote Statement", alias="VoteStatement")
    voting_sequence: Optional[StrictInt] = Field(default=None, description="VoteMember sequence", alias="VotingSequence")
    __properties: ClassVar[List[str]] = ["VoteMemberID", "MemberID", "MemberDisplayName", "PatronDisplayName", "MemberNumber", "ResponseCode", "VoteStatement", "VotingSequence"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicVoteMemberResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if vote_member_id (nullable) is None
        # and model_fields_set contains the field
        if self.vote_member_id is None and "vote_member_id" in self.model_fields_set:
            _dict['VoteMemberID'] = None

        # set to None if member_id (nullable) is None
        # and model_fields_set contains the field
        if self.member_id is None and "member_id" in self.model_fields_set:
            _dict['MemberID'] = None

        # set to None if member_display_name (nullable) is None
        # and model_fields_set contains the field
        if self.member_display_name is None and "member_display_name" in self.model_fields_set:
            _dict['MemberDisplayName'] = None

        # set to None if patron_display_name (nullable) is None
        # and model_fields_set contains the field
        if self.patron_display_name is None and "patron_display_name" in self.model_fields_set:
            _dict['PatronDisplayName'] = None

        # set to None if member_number (nullable) is None
        # and model_fields_set contains the field
        if self.member_number is None and "member_number" in self.model_fields_set:
            _dict['MemberNumber'] = None

        # set to None if response_code (nullable) is None
        # and model_fields_set contains the field
        if self.response_code is None and "response_code" in self.model_fields_set:
            _dict['ResponseCode'] = None

        # set to None if vote_statement (nullable) is None
        # and model_fields_set contains the field
        if self.vote_statement is None and "vote_statement" in self.model_fields_set:
            _dict['VoteStatement'] = None

        # set to None if voting_sequence (nullable) is None
        # and model_fields_set contains the field
        if self.voting_sequence is None and "voting_sequence" in self.model_fields_set:
            _dict['VotingSequence'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicVoteMemberResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "VoteMemberID": obj.get("VoteMemberID"),
            "MemberID": obj.get("MemberID"),
            "MemberDisplayName": obj.get("MemberDisplayName"),
            "PatronDisplayName": obj.get("PatronDisplayName"),
            "MemberNumber": obj.get("MemberNumber"),
            "ResponseCode": obj.get("ResponseCode"),
            "VoteStatement": obj.get("VoteStatement"),
            "VotingSequence": obj.get("VotingSequence")
        })
        return _obj


