# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PublicMinutesFile(BaseModel):
    """
    Minute File repsonse object inside MinutesBook
    """ # noqa: E501
    minutes_book_id: Optional[StrictInt] = Field(default=None, description="Minutes Book unique identifier", alias="MinutesBookID")
    file_url: Optional[Annotated[str, Field(strict=True, max_length=250)]] = Field(default=None, description="File URL", alias="FileURL")
    text_format_id: Optional[StrictInt] = Field(default=None, description="Text Format ID", alias="TextFormatID")
    is_active: Optional[StrictBool] = Field(default=None, description="Is Active true/false", alias="IsActive")
    minutes_file_id: Optional[StrictInt] = Field(default=None, description="unique identifier for Minutes File", alias="MinutesFileID")
    __properties: ClassVar[List[str]] = ["MinutesBookID", "FileURL", "TextFormatID", "IsActive", "MinutesFileID"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicMinutesFile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if minutes_book_id (nullable) is None
        # and model_fields_set contains the field
        if self.minutes_book_id is None and "minutes_book_id" in self.model_fields_set:
            _dict['MinutesBookID'] = None

        # set to None if file_url (nullable) is None
        # and model_fields_set contains the field
        if self.file_url is None and "file_url" in self.model_fields_set:
            _dict['FileURL'] = None

        # set to None if text_format_id (nullable) is None
        # and model_fields_set contains the field
        if self.text_format_id is None and "text_format_id" in self.model_fields_set:
            _dict['TextFormatID'] = None

        # set to None if is_active (nullable) is None
        # and model_fields_set contains the field
        if self.is_active is None and "is_active" in self.model_fields_set:
            _dict['IsActive'] = None

        # set to None if minutes_file_id (nullable) is None
        # and model_fields_set contains the field
        if self.minutes_file_id is None and "minutes_file_id" in self.model_fields_set:
            _dict['MinutesFileID'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicMinutesFile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "MinutesBookID": obj.get("MinutesBookID"),
            "FileURL": obj.get("FileURL"),
            "TextFormatID": obj.get("TextFormatID"),
            "IsActive": obj.get("IsActive"),
            "MinutesFileID": obj.get("MinutesFileID")
        })
        return _obj


