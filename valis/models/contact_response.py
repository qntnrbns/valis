# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ContactResponse(BaseModel):
    """
    Information for a Contact
    """ # noqa: E501
    contact_information_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for this Contact", alias="ContactInformationID")
    owner_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Owner", alias="OwnerID")
    contact_type_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Contact Type", alias="ContactTypeID")
    contact_type: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="Contact Type", alias="ContactType")
    address1: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="Address 1", alias="Address1")
    address2: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="Address 2", alias="Address2")
    address3: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="Address 3", alias="Address3")
    city: Optional[Annotated[str, Field(strict=True, max_length=30)]] = Field(default=None, description="City", alias="City")
    state_code: Optional[Annotated[str, Field(strict=True, max_length=2)]] = Field(default=None, description="State", alias="StateCode")
    zip_code: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(default=None, description="Postal/Zip Code", alias="ZipCode")
    phone_number: Optional[Annotated[str, Field(strict=True, max_length=15)]] = Field(default=None, description="Phone Number", alias="PhoneNumber")
    email_address: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="Email Address", alias="EmailAddress")
    is_active: Optional[StrictBool] = Field(default=None, description="Is this Contact active?", alias="IsActive")
    is_public: Optional[StrictBool] = Field(default=None, description="Is this Contact public?", alias="IsPublic")
    __properties: ClassVar[List[str]] = ["ContactInformationID", "OwnerID", "ContactTypeID", "ContactType", "Address1", "Address2", "Address3", "City", "StateCode", "ZipCode", "PhoneNumber", "EmailAddress", "IsActive", "IsPublic"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContactResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if contact_information_id (nullable) is None
        # and model_fields_set contains the field
        if self.contact_information_id is None and "contact_information_id" in self.model_fields_set:
            _dict['ContactInformationID'] = None

        # set to None if contact_type (nullable) is None
        # and model_fields_set contains the field
        if self.contact_type is None and "contact_type" in self.model_fields_set:
            _dict['ContactType'] = None

        # set to None if address1 (nullable) is None
        # and model_fields_set contains the field
        if self.address1 is None and "address1" in self.model_fields_set:
            _dict['Address1'] = None

        # set to None if address2 (nullable) is None
        # and model_fields_set contains the field
        if self.address2 is None and "address2" in self.model_fields_set:
            _dict['Address2'] = None

        # set to None if address3 (nullable) is None
        # and model_fields_set contains the field
        if self.address3 is None and "address3" in self.model_fields_set:
            _dict['Address3'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['City'] = None

        # set to None if state_code (nullable) is None
        # and model_fields_set contains the field
        if self.state_code is None and "state_code" in self.model_fields_set:
            _dict['StateCode'] = None

        # set to None if zip_code (nullable) is None
        # and model_fields_set contains the field
        if self.zip_code is None and "zip_code" in self.model_fields_set:
            _dict['ZipCode'] = None

        # set to None if phone_number (nullable) is None
        # and model_fields_set contains the field
        if self.phone_number is None and "phone_number" in self.model_fields_set:
            _dict['PhoneNumber'] = None

        # set to None if email_address (nullable) is None
        # and model_fields_set contains the field
        if self.email_address is None and "email_address" in self.model_fields_set:
            _dict['EmailAddress'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContactResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ContactInformationID": obj.get("ContactInformationID"),
            "OwnerID": obj.get("OwnerID"),
            "ContactTypeID": obj.get("ContactTypeID"),
            "ContactType": obj.get("ContactType"),
            "Address1": obj.get("Address1"),
            "Address2": obj.get("Address2"),
            "Address3": obj.get("Address3"),
            "City": obj.get("City"),
            "StateCode": obj.get("StateCode"),
            "ZipCode": obj.get("ZipCode"),
            "PhoneNumber": obj.get("PhoneNumber"),
            "EmailAddress": obj.get("EmailAddress"),
            "IsActive": obj.get("IsActive"),
            "IsPublic": obj.get("IsPublic")
        })
        return _obj


