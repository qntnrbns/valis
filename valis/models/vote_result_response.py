# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class VoteResultResponse(BaseModel):
    """
    Information for a Vote Result
    """ # noqa: E501
    vote_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for a Vote", alias="VoteID")
    chamber_code: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=1)]] = Field(default=None, description="Chamber code (H/S)", alias="ChamberCode")
    committee_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Committee", alias="CommitteeID")
    committee_name: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="Committee Name", alias="CommitteeName")
    vote_number: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="Vote assigned number (e.g. H12V0164/S03V0170)", alias="VoteNumber")
    session_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Session", alias="SessionID")
    vote_date: Optional[datetime] = Field(default=None, description="Vote date", alias="VoteDate")
    sequence: Optional[StrictInt] = Field(default=None, description="Sequence results", alias="Sequence")
    vote_type_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Vote Type", alias="VoteTypeID")
    vote_type: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="Vote Type name", alias="VoteType")
    vote_classification_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Vote Classification", alias="VoteClassificationID")
    classification_name: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="Vote Classification name", alias="ClassificationName")
    batch_number: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="Vote batch number", alias="BatchNumber")
    vote_description: Optional[Annotated[str, Field(strict=True, max_length=250)]] = Field(default=None, description="Vote description", alias="VoteDescription")
    vote_action_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Vote Action", alias="VoteActionID")
    action_description: Optional[Annotated[str, Field(strict=True, max_length=275)]] = Field(default=None, description="Vote Action description", alias="ActionDescription")
    pass_fail: Optional[Annotated[str, Field(strict=True, max_length=1)]] = Field(default=None, description="Vote Pass/Fail", alias="PassFail")
    response_code: Optional[Annotated[str, Field(strict=True, max_length=1)]] = Field(default=None, description="Vote Response Code", alias="ResponseCode")
    vote_statement: Optional[Annotated[str, Field(strict=True, max_length=2500)]] = Field(default=None, description="Vote Statement", alias="VoteStatement")
    vote_legislation_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Vote Legislation", alias="VoteLegislationID")
    legislation_id: Optional[StrictInt] = Field(default=None, description="Unique identifier for Legislation", alias="LegislationID")
    legislation_number: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(default=None, description="Legislation number", alias="LegislationNumber")
    legislation_description: Optional[Annotated[str, Field(strict=True, max_length=1000)]] = Field(default=None, description="Legislation description", alias="LegislationDescription")
    __properties: ClassVar[List[str]] = ["VoteID", "ChamberCode", "CommitteeID", "CommitteeName", "VoteNumber", "SessionID", "VoteDate", "Sequence", "VoteTypeID", "VoteType", "VoteClassificationID", "ClassificationName", "BatchNumber", "VoteDescription", "VoteActionID", "ActionDescription", "PassFail", "ResponseCode", "VoteStatement", "VoteLegislationID", "LegislationID", "LegislationNumber", "LegislationDescription"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VoteResultResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if chamber_code (nullable) is None
        # and model_fields_set contains the field
        if self.chamber_code is None and "chamber_code" in self.model_fields_set:
            _dict['ChamberCode'] = None

        # set to None if committee_id (nullable) is None
        # and model_fields_set contains the field
        if self.committee_id is None and "committee_id" in self.model_fields_set:
            _dict['CommitteeID'] = None

        # set to None if committee_name (nullable) is None
        # and model_fields_set contains the field
        if self.committee_name is None and "committee_name" in self.model_fields_set:
            _dict['CommitteeName'] = None

        # set to None if vote_number (nullable) is None
        # and model_fields_set contains the field
        if self.vote_number is None and "vote_number" in self.model_fields_set:
            _dict['VoteNumber'] = None

        # set to None if vote_type (nullable) is None
        # and model_fields_set contains the field
        if self.vote_type is None and "vote_type" in self.model_fields_set:
            _dict['VoteType'] = None

        # set to None if vote_classification_id (nullable) is None
        # and model_fields_set contains the field
        if self.vote_classification_id is None and "vote_classification_id" in self.model_fields_set:
            _dict['VoteClassificationID'] = None

        # set to None if classification_name (nullable) is None
        # and model_fields_set contains the field
        if self.classification_name is None and "classification_name" in self.model_fields_set:
            _dict['ClassificationName'] = None

        # set to None if batch_number (nullable) is None
        # and model_fields_set contains the field
        if self.batch_number is None and "batch_number" in self.model_fields_set:
            _dict['BatchNumber'] = None

        # set to None if vote_description (nullable) is None
        # and model_fields_set contains the field
        if self.vote_description is None and "vote_description" in self.model_fields_set:
            _dict['VoteDescription'] = None

        # set to None if action_description (nullable) is None
        # and model_fields_set contains the field
        if self.action_description is None and "action_description" in self.model_fields_set:
            _dict['ActionDescription'] = None

        # set to None if pass_fail (nullable) is None
        # and model_fields_set contains the field
        if self.pass_fail is None and "pass_fail" in self.model_fields_set:
            _dict['PassFail'] = None

        # set to None if response_code (nullable) is None
        # and model_fields_set contains the field
        if self.response_code is None and "response_code" in self.model_fields_set:
            _dict['ResponseCode'] = None

        # set to None if vote_statement (nullable) is None
        # and model_fields_set contains the field
        if self.vote_statement is None and "vote_statement" in self.model_fields_set:
            _dict['VoteStatement'] = None

        # set to None if vote_legislation_id (nullable) is None
        # and model_fields_set contains the field
        if self.vote_legislation_id is None and "vote_legislation_id" in self.model_fields_set:
            _dict['VoteLegislationID'] = None

        # set to None if legislation_id (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_id is None and "legislation_id" in self.model_fields_set:
            _dict['LegislationID'] = None

        # set to None if legislation_number (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_number is None and "legislation_number" in self.model_fields_set:
            _dict['LegislationNumber'] = None

        # set to None if legislation_description (nullable) is None
        # and model_fields_set contains the field
        if self.legislation_description is None and "legislation_description" in self.model_fields_set:
            _dict['LegislationDescription'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VoteResultResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "VoteID": obj.get("VoteID"),
            "ChamberCode": obj.get("ChamberCode"),
            "CommitteeID": obj.get("CommitteeID"),
            "CommitteeName": obj.get("CommitteeName"),
            "VoteNumber": obj.get("VoteNumber"),
            "SessionID": obj.get("SessionID"),
            "VoteDate": obj.get("VoteDate"),
            "Sequence": obj.get("Sequence"),
            "VoteTypeID": obj.get("VoteTypeID"),
            "VoteType": obj.get("VoteType"),
            "VoteClassificationID": obj.get("VoteClassificationID"),
            "ClassificationName": obj.get("ClassificationName"),
            "BatchNumber": obj.get("BatchNumber"),
            "VoteDescription": obj.get("VoteDescription"),
            "VoteActionID": obj.get("VoteActionID"),
            "ActionDescription": obj.get("ActionDescription"),
            "PassFail": obj.get("PassFail"),
            "ResponseCode": obj.get("ResponseCode"),
            "VoteStatement": obj.get("VoteStatement"),
            "VoteLegislationID": obj.get("VoteLegislationID"),
            "LegislationID": obj.get("LegislationID"),
            "LegislationNumber": obj.get("LegislationNumber"),
            "LegislationDescription": obj.get("LegislationDescription")
        })
        return _obj


